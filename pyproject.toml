[project]
name = "acapy-cloud"
version = "5.0.0-rc6"
description = "Main project configuration for acapy-cloud"
authors = [
  { name = "Mourits de Beer", email = "mourits.debeer@didx.co.za" },
  { name = "Cloete du Preez", email = "cloete.dupreez@didx.co.za" },
]
readme = "README.md"

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "~3.12.8"

base58 = "~2.1.1"
fastapi = "~0.115.10"
httpx = "~0.28.0"
loguru = "~0.7.2"
orjson = "~3.10.7"
pydantic = "~2.11.6"
PyYAML = "~6.0.2"
scalar-fastapi = "^1.0.3"
uvicorn = "~0.35.0"
uvloop = "^0.21.0"

[tool.poetry.group.app.dependencies]
aiohttp = "~3.12.0"
aiocache = "~0.12.0"
aries-cloudcontroller = "==1.3.0.post20250526"
pyjwt = "~2.10.0"
uuid_utils = "^0.11.0"

[tool.poetry.group.trust-registry.dependencies]
alembic = "~1.16.0"
asyncpg = "^0.30.0"
psycopg2-binary = "~2.9.6"
sqlalchemy = {version = "~2.0.40", extras = ["asyncio"]}

[tool.poetry.group.tails.dependencies]
aiofiles = "^24.1.0"
boto3 = "~1.39.1"
python-multipart = "~0.0.20"

[tool.poetry.group.waypoint.dependencies]
aiohttp = "~3.12.0"
dependency-injector = "^4.48.0"
nats-py = { git = "https://github.com/ff137/nats.py", tag = "v2.10.0-w-orjson", extras = [
  "nkeys",
  "orjson",
  "uuid_utils",
] }
sse-starlette = "~2.3.3"
tenacity = "^9.1.0"
uuid_utils = "^0.11.0"

[tool.poetry.group.dev.dependencies]
anyio = "~4.9.0"
mypy = "~1.16.0"
pre-commit = "~4.2.0"
pytest = "~8.4.1"
pytest-cov = "~6.2.1"
pytest-mock = "~3.14.0"
pytest-ruff = "^0.5.0"
pytest-xdist = "^3.6.1"
ruff = "~0.12.0"

[tool.coverage.run]
omit = [
  "*/tests/*",                   # Ignore test files in coverage report
  "*/.venv/*",                   # Ignore virtual environment files
  "*/src/dependency_injector/*", # Ignore files generated by dependency-injector
]

[tool.mypy]
exclude = [
  "scripts/*",
  "app/tests/*",
  "shared/tests/*",
  "tails/tests/*",
  "trustregistry/tests/*",
  "waypoint/tests/*",
]

[tool.pytest.ini_options]
addopts = "--junitxml=junit.xml -p no:cacheprovider --cov-report=xml --cov-report=term:skip-covered"
junit_family = "xunit2"

[tool.ruff]
line-length = 88
lint.pycodestyle.max-line-length = 120
target-version = "py312"
lint.select = [
  "ANN",   # flake8-annotations (type annotations)
  "ASYNC", # flake8-async (async/await)
  "B",     # flake8-bugbear (detect likely bugs)
  "C",     # mccabe (code complexity)
  "D",     # pydocstyle (docstring style)
  "E",     # pycodestyle errors (style errors)
  "F",     # pyflakes (detect invalid Python code)
  "FAST",  # fastapi
  "I",     # isort (import sorting)
  "N",     # pep8-naming (naming conventions)
  "PERF",  # perflint (performance anti-patterns)
  "PL",    # pylint
  "RUF",   # ruff-specific rules
  "T20",   # flake8-print (print statements)
  "UP",    # pyupgrade (upgrade syntax)
  "W",     # pycodestyle warnings (style warnings)
]
lint.ignore = [
  # Annotations:
  "ANN002", # Missing type annotation for *args
  "ANN003", # Missing type annotation for **kwargs

  # Docstring related:
  "D100", # Missing docstring in the module
  "D101", # Missing docstring in the class
  "D102", # Missing docstring in public method
  "D103", # Missing docstring in public function
  "D104", # Missing docstring in public package
  "D203", # 1 blank line required before class docstring
  "D205", # 1 blank line required between summary line and description
  "D213", # Multi-line docstring summary should start at the second line
  "D400", # First line should end with a period
  "D401", # First line of docstring should be in imperative mood
  "D415", # First line should end with a period, question mark, or exclamation point

  # Fix later:
  "C901",    # Function complexity is too high
  "PLR0912", # Too many branches
  "PLR0913", # Too many arguments in function definition
  "PLR0915", # Too many statements

  # Maybe fix:
  "FAST002", # FastAPI dependency without `Annotated`
  "PLR2004", # Magic value used in comparison, consider replacing `500` with a constant variable

  # Won't fix:
  "B008", # Do not perform function call `Depends` in argument defaults

  # False positives:
  "PLE1205", # Too many arguments detected for loguru {} formatted strings
]
exclude = [".git/*", ".venv/*"]

[tool.ruff.lint.per-file-ignores]
"*/tests/*" = [ # Don't require these rules for tests
  "ANN001", # Missing type annotation for function argument
  "ANN201", # Missing return type annotation for public function
]

[build-system]
requires = ["poetry-core>=2.1"]
build-backend = "poetry.core.masonry.api"

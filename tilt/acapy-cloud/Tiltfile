load("../utils/Tiltfile", "namespace_create_wrap", "generate_ingress_domain")
load("ext://color", "color")
load("ext://helm_resource", "helm_resource", "helm_repo")

# https://github.com/cheqd/cheqd-node
cheqd_noded_version = "v3.1.9"
# https://github.com/bitnami/charts/tree/main/bitnami/minio
minio_version = "17.0.6"
# https://github.com/rowanruseler/helm-charts/tree/main/charts/pgadmin4
pgadmin_version = "1.47.0"
# https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha
postgres_version = "16.0.14"
# https://github.com/redpanda-data/helm-charts/tree/main/charts/connect
redpanda_connect_version = "3.0.3"
# https://github.com/bitnami/charts/tree/main/bitnami/valkey
valkey_version = "3.0.15"

# Mnemonic for the Cheqd Localnet Validator
# Will be used for Localnet as well as the Fee Payer for Cheqd DID Driver
cheqd_validator_mnemonic = (
    "betray purity grief spatial rude select loud reason wolf harvest session awesome"
)

registry = "localhost:5001"

# Detect CPU Architecture
cpu_arch = str(local("uname -m", echo_off=True, quiet=True)).lower().strip()


def setup_postgres(namespace):
    print(color.green("Installing Postgres..."))

    values_file = "./helm/acapy-cloud/conf/postgres.yaml"

    ## Setup HA Postgres
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha
    helm_resource(
        name="postgres",
        chart="oci://registry-1.docker.io/bitnamicharts/postgresql-ha",
        release_name="postgres",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            # Due to bug in Askar (https://github.com/hyperledger/aries-askar/issues/299)
            # we can't use PGPool on first boot and we need to guarantee that we talk to
            # the primary Postgres instance.
            # So we set replicaCount to 1 to avoid accidentally talking to a RO replica.
            "--set",
            "postgresql.replicaCount=1",
            "--version",
            postgres_version,
            "--wait",
        ],
        labels=["04-dbs"],
        resource_deps=["cloudapi-ns"],
        deps=[values_file],
    )


def setup_valkey(namespace):
    print(color.green("Installing Valkey..."))

    values_file = "./helm/acapy-cloud/conf/valkey.yaml"

    ## Setup Valkey
    # https://github.com/bitnami/charts/tree/main/bitnami/valkey
    helm_resource(
        name="valkey",
        chart="oci://registry-1.docker.io/bitnamicharts/valkey",
        release_name="valkey",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            "--version",
            valkey_version,
            "--wait",
        ],
        labels=["04-dbs"],
        resource_deps=["cloudapi-ns"],
        port_forwards=[
            port_forward(6379, name="valkey"),
        ],
        deps=[values_file],
    )


def setup_pgadmin(namespace, ingress_domain):
    print(color.green("Installing pgAdmin..."))

    values_file = "./helm/acapy-cloud/conf/pgadmin.yaml"
    pgadmin_host = "pgadmin." + ingress_domain

    ## Setup pgAdmin
    # https://github.com/rowanruseler/helm-charts/tree/main/charts/pgadmin4
    helm_repo(
        name="runix",
        url="https://rowanruseler.github.io/helm-charts",
        resource_name="runix",
        labels=["10-helm-repos"],
    )
    helm_resource(
        name="pgadmin",
        chart="runix/pgadmin4",
        release_name="pgadmin",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            "--set",
            "ingress.hosts[0].host=" + pgadmin_host,
            "--version",
            pgadmin_version,
            "--wait",
        ],
        labels=["04-dbs"],
        resource_deps=[
            "cloudapi-ns",
            "runix",
            "ingress-nginx",
            "istio",
        ],
        deps=[values_file],
        auto_init=False,
    )
    k8s_resource(
        workload="pgadmin",
        links=[
            link("http://" + pgadmin_host, "pgAdmin"),
        ],
    )


def setup_nats(namespace):
    print(color.green("Installing NATS..."))

    chart_dir = "./helm/nats"
    values_file = chart_dir + "/values.yaml"

    ## Setup NATS
    # https://github.com/bitnami/charts/tree/main/bitnami/nats
    flags = []
    if config.tilt_subcommand == "ci":
        flags = [
            "--set",
            "nats.replicaCount=1",
        ]
    local_resource(
        name="build-nats",
        cmd="helm dep build --skip-refresh " + chart_dir,
        labels=["10-helm-repos"],
        allow_parallel=True,
    )
    helm_resource(
        name="nats",
        chart=chart_dir,
        release_name="nats",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            "--wait",
        ]
        + flags,
        labels=["03-streaming"],
        resource_deps=[
            "cloudapi-ns",
            "build-nats",
        ],
        port_forwards=[
            port_forward(8222, name="monitoring"),
            port_forward(4222, name="nats"),
        ],
        deps=[
            values_file,
            chart_dir + "/Chart.yaml",
            chart_dir + "/Chart.lock",
        ],
    )


def apply_connect_config_map(
    namespace, resource_name, config_dir, from_file_args, deps=[]
):
    print(color.green("Applying Redpanda Connect Config Map..."))
    k8s_context = os.environ.get("KIND_K8S_CONTEXT")

    local_resource(
        name=resource_name,
        cmd="kubectl --context="
        + k8s_context
        + " create configmap "
        + resource_name
        + " "
        + from_file_args
        + " --dry-run=client -o yaml"
        + " -n "
        + namespace
        + " | kubectl --context="
        + k8s_context
        + " apply -f - && "
        + "kubectl --context="
        + k8s_context
        + " delete pod -n "
        + namespace
        + " -l 'app.kubernetes.io/instance="
        + resource_name
        + "' --ignore-not-found=true",
        deps=deps,
        labels=["03-streaming"],
        allow_parallel=True,
        resource_deps=["cloudapi-ns"],
    )


def setup_redpanda_connect_cloud(namespace):
    print(color.green("Installing Redpanda Connect Cloud Processor..."))

    resource_name = "connect-cloud"
    project_root = os.getcwd()
    current_dir = os.path.abspath(os.path.dirname(__file__))
    values_file = project_root + "/helm/acapy-cloud/conf/local/connect-cloud.yaml"

    helm_repo(
        name="redpanda",
        url="https://charts.redpanda.com",
        resource_name="redpanda-repo-cloud",
        labels=["10-helm-repos"],
    )

    connect_config_dir = project_root + "/resources/connect-processors/cloud"
    pipeline_config_files = str(
        local(
            "find " + connect_config_dir + '/pipelines -type f -name "*.yaml"',
            quiet=True,
        )
    ).splitlines()
    print(color.green("Pipeline config files: " + str(pipeline_config_files)))
    pipeline_from_file_args = " ".join(
        ["--from-file=" + f for f in pipeline_config_files]
    )

    # Create ConfigMap using kubectl but output only the YAML
    apply_connect_config_map(
        namespace,
        resource_name + "-pipelines",
        connect_config_dir + "/pipelines",
        pipeline_from_file_args,
        pipeline_config_files,
    )

    resource_config_files = str(
        local(
            "find " + connect_config_dir + '/resources -type f -name "*.yaml"',
            quiet=True,
        )
    ).splitlines()
    print(color.green("Resource config files: " + str(resource_config_files)))
    resource_from_file_args = " ".join(
        ["--from-file=" + f for f in resource_config_files]
    )

    apply_connect_config_map(
        namespace,
        resource_name + "-resources",
        connect_config_dir + "/resources",
        resource_from_file_args,
        resource_config_files,
    )

    ## Create helm release
    # https://github.com/redpanda-data/helm-charts/tree/main/charts/connect
    helm_resource(
        name=resource_name,
        chart="redpanda/connect",
        release_name=resource_name,
        namespace=namespace,
        flags=[
            "--set",
            "fullnameOverride=" + resource_name,
            "--values",
            values_file,
            "--set",
            "streams.streamsConfigMap=" + resource_name + "-pipelines",
            "--version",
            redpanda_connect_version,
        ],
        labels=["03-streaming"],
        resource_deps=[
            "cloudapi-ns",
            "redpanda-repo-cloud",
            "nats",
            "istio",
            resource_name + "-pipelines",
        ],
        deps=[
            values_file,
        ],
    )


def setup_minio(namespace, ingress_domain):
    resource_name = "minio"
    project_root = os.getcwd()
    current_dir = os.path.abspath(os.path.dirname(__file__))
    values_file = project_root + "/helm/acapy-cloud/conf/minio.yaml"

    print(color.green("Installing MinIO..."))

    # https://github.com/bitnami/charts/tree/main/bitnami/minio
    helm_resource(
        name=resource_name,
        chart="oci://registry-1.docker.io/bitnamicharts/minio",
        release_name=resource_name,
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            "--set",
            "console.ingress.hostname=minio." + ingress_domain,
            "--set",
            "ingress.hostname=minio-api." + ingress_domain,
            "--version",
            minio_version,
            "--wait",
        ],
        labels=["04-dbs"],
        resource_deps=[
            "cloudapi-ns",
            "ingress-nginx",
        ],
        deps=[
            values_file,
        ],
    )

    k8s_resource(
        workload=resource_name,
        links=[
            link("http://minio." + ingress_domain, "MinIO Console"),
            link("http://minio-api." + ingress_domain, "MinIO API"),
        ],
    )


def build_cloudapi_service(service, image={}):
    # use custom_build instead of docker_build to support both docker and podman (in docker compatibility mode)
    custom_build(
        registry + "/" + service,
        # Command to build the image using docker with insecure registry
        "docker build --network=host -t $EXPECTED_REF "
        + "--file="
        + image.get("dockerfile", "Dockerfile is required")
        + " "
        + image.get("context", ".")
        + " && docker push $EXPECTED_REF",
        deps=["./"],
        live_update=image.get("live_update", []),
        skips_local_docker=True,
        ignore=["**/tests/**"] + image.get("ignore", []),
    )
    return [registry + "/" + service]


def setup_cloudapi_service(
    release,
    chart,
    namespace,
    ingress_domain,
    build_enabled,
    release_config={},
    values_file=None,
):
    print(color.green("Installing " + release + "..."))

    image_deps = []
    image_keys = []

    flags = release_config.get("flags", [])

    if "image" in release_config:
        if build_enabled:
            image_deps = build_cloudapi_service(release, release_config["image"])
            image_keys = [("image.registry", "image.name", "image.tag")]
        else:
            registry = release_config["image"].get(
                "registry", os.environ.get("REGISTRY", "ghcr.io/didx-xyz")
            )
            tag = release_config["image"].get(
                "tag", os.environ.get("IMAGE_TAG", "latest")
            )
            # Use pre-existing image
            flags += [
                "--set",
                "image.registry=" + registry,
                "--set",
                "image.tag=" + tag,
            ]

    # Setup CloudAPI Service
    if release_config.get("enabled", True):
        base_values_file = chart + "/values.yaml"
        if not values_file:
            values_file = chart + "/conf/local/" + release + ".yaml"
        helm_resource(
            name=release,
            chart=chart,
            release_name=release,
            namespace=namespace,
            image_deps=image_deps,
            image_keys=image_keys,
            flags=[
                "--values",
                values_file,
                "--set",
                "replicaCount=" + str(release_config.get("replicaCount", 1)),
                "--set",
                "ingressDomain=cloudapi." + ingress_domain,
                "--wait",
                "--timeout=10m",
            ]
            + flags,
            labels=release_config.get("labels", ["01-cloudapi"]),
            resource_deps=[
                "cloudapi-ns",
                "ingress-nginx",
                "istio",
            ]
            + release_config.get("depends", []),
            deps=[base_values_file, values_file],
            port_forwards=release_config.get("port_forwards", []),
            auto_init=release_config.get("auto_init", True),
        )
        k8s_resource(workload=release, links=release_config.get("links", []))
    else:
        print(color.yellow("Skipping " + release + ", not enabled"))


def add_live_update(live_update_config, enabled):
    # live_update_config: List[Tuple[str, str]]
    # enabled: bool
    # return: List[sync]
    config = []
    if enabled:
        for src, dest in live_update_config:
            config.append(sync(src, dest))
        return config
    return []


def setup_cheqd_localnet(namespace, ingress_domain):
    print(color.green("Installing Cheqd Localnet..."))

    project_root = os.getcwd()
    cheqd_path = project_root + "/tilt/.cheqd-node"

    build_enabled = cpu_arch == "arm64"

    if build_enabled and not os.path.exists(cheqd_path):
        clone_cmd = (
            "git clone https://github.com/cheqd/cheqd-node.git --depth 1 "
            + "--branch "
            + cheqd_noded_version
            + " "
            + cheqd_path
        )
        print(color.green("Cloning cheqd-node repository..."))
    else:
        clone_cmd = "echo 'Cheqd node directory already exists or build is disabled, skipping clone'"
        print(
            color.green(
                "Cheqd node directory already exists or build is disabled, skipping clone"
            )
        )

    local_resource(
        name="checkout-cheqd-node",
        cmd=clone_cmd,
        allow_parallel=True,
        labels=["11-cheqd"],
    )

    setup_cloudapi_service(
        "cheqd",
        "./helm/cheqd",
        namespace,
        ingress_domain,
        build_enabled,
        {
            "depends": ["checkout-cheqd-node"],
            "image": {
                "registry": "ghcr.io",
                "tag": cheqd_noded_version.lstrip("v"),
                "dockerfile": project_root + "/tilt/.cheqd-node/docker/Dockerfile",
                "context": project_root + "/tilt/.cheqd-node",
                "ignore": ["**"],
            },
            "flags": [
                "--set",
                "secrets.validatorMnemonic=" + cheqd_validator_mnemonic,
            ],
            "labels": ["11-cheqd"],
            "links": [
                link(
                    "http://api.cheqd." + ingress_domain,
                    "Cheqd API",
                ),
                link(
                    "http://api.cheqd." + ingress_domain + "/swagger/",
                    "Cheqd API Docs",
                ),
                link(
                    "http://rpc.cheqd." + ingress_domain,
                    "Cheqd RPC",
                ),
                link(
                    "https://grpc.cheqd." + ingress_domain,
                    "Cheqd gRPC",
                ),
                link(
                    "http://grpc-web.cheqd." + ingress_domain,
                    "Cheqd gRPC Web",
                ),
            ],
        },
        values_file="./helm/cheqd/conf/localnet/values.yaml",
    )


def setup_cloudapi(build_enabled, expose):
    print(color.green("Installing CloudAPI..."))

    # Adopt and manage CloudAPI namespace
    namespace = namespace_create_wrap(
        namespace="cloudapi",
        namespace_labels=["istio-injection: enabled"],
        allow_duplicates=True,
    )

    ingress_domain = generate_ingress_domain(expose)
    print(color.green("Ingress Domain: " + ingress_domain))

    setup_cheqd_localnet(namespace, ingress_domain)
    setup_minio(namespace, ingress_domain)
    setup_nats(namespace)
    setup_pgadmin(namespace, ingress_domain)
    setup_postgres(namespace)
    setup_redpanda_connect_cloud(namespace)
    setup_valkey(namespace)

    releases = {
        "governance-agent": {
            "depends": ["nats", "postgres", "valkey", "did-registrar", "did-resolver"],
            "links": [
                link(
                    "http://governance-agent.cloudapi." + ingress_domain,
                    "Governance Agent",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/agents/Dockerfile",
                "ignore": [
                    "**/*.isorted",
                    "app/**",
                    "shared/**",
                    "tails/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "governance-web": {
            "depends": ["governance-agent"],
            "links": [
                link(
                    "http://cloudapi." + ingress_domain + "/governance",
                    "Governance Web",
                ),
                link(
                    "http://cloudapi." + ingress_domain + "/governance/docs",
                    "Governance Web Docs",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "scripts/**",
                    "tails/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "multitenant-agent": {
            "depends": ["nats", "postgres", "valkey", "did-registrar", "did-resolver"],
            "links": [
                link(
                    "http://multitenant-agent.cloudapi." + ingress_domain,
                    "Multitenant Agent",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/agents/Dockerfile",
                "ignore": [
                    "**/*.isorted",
                    "app/**",
                    "shared/**",
                    "tails/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "multitenant-web": {
            "depends": ["multitenant-agent"],
            "links": [
                link(
                    "http://cloudapi." + ingress_domain + "/tenant-admin",
                    "Tenant Admin",
                ),
                link(
                    "http://cloudapi." + ingress_domain + "/tenant-admin/docs",
                    "Tenant Admin Docs",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "scripts/**",
                    "tails/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "tenant-web": {
            "depends": ["governance-agent", "multitenant-agent"],
            "links": [
                link("http://cloudapi." + ingress_domain + "/tenant", "Tenant"),
                link(
                    "http://cloudapi." + ingress_domain + "/tenant/docs", "Tenant Docs"
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "scripts/**",
                    "tails/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "public-web": {
            "depends": ["trust-registry"],
            "links": [
                link("http://cloudapi." + ingress_domain + "/public", "Public"),
                link(
                    "http://cloudapi." + ingress_domain + "/public/docs", "Public Docs"
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "scripts/**",
                    "tails/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "trust-registry": {
            "depends": ["postgres"],
            "links": [
                link(
                    "http://trust-registry.cloudapi." + ingress_domain,
                    "Trust Registry",
                ),
                link(
                    "http://trust-registry.cloudapi." + ingress_domain + "/docs",
                    "Trust Registry Docs",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/trustregistry/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./trustregistry", "/trustregistry"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "app/**",
                    "scripts/**",
                    "tails/**",
                    "waypoint/**",
                ],
            },
        },
        "waypoint": {
            "depends": ["nats"],
            "links": [
                link("http://waypoint.cloudapi." + ingress_domain + "/docs", "Docs"),
            ],
            "image": {
                "dockerfile": "./dockerfiles/waypoint/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./waypoint", "/waypoint"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "app/**",
                    "scripts/**",
                    "tails/**",
                    "trustregistry/**",
                ],
            },
        },
        "mediator": {
            "auto_init": False,
            "depends": ["postgres"],
            "links": [
                link("http://mediator.cloudapi." + ingress_domain, "Mediator"),
            ],
        },
        "tails-server": {
            "depends": ["minio"],
            "links": [
                link("http://tails-server.cloudapi." + ingress_domain, "Tails"),
                link(
                    "http://tails-server.cloudapi." + ingress_domain + "/docs", "Docs"
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/tails/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./tails", "/tails"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "**/*.isorted",
                    "app/**",
                    "scripts/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "driver-did-cheqd": {
            # https://github.com/cheqd/did-registrar
            "depends": ["did-resolver"],
            "flags": [
                "--set",
                "secretData.FEE_PAYER_TESTNET_MNEMONIC=" + cheqd_validator_mnemonic,
            ],
        },
        "did-registrar": {
            # https://github.com/decentralized-identity/universal-registrar
            "depends": ["driver-did-cheqd"],
        },
        "did-resolver": {
            # https://github.com/cheqd/did-resolver
            "depends": ["cheqd"],
            "flags": [
                "--set",
                "ingressDomain=" + ingress_domain,
            ],
            "links": [
                link(
                    "http://resolver.cheqd." + ingress_domain + "/1.0/identifiers/",
                    "DID Resolver",
                ),
                link(
                    "http://resolver.cheqd." + ingress_domain + "/swagger/",
                    "DID Resolver Docs",
                ),
            ],
        },
    }

    for release in releases:
        setup_cloudapi_service(
            release,
            "./helm/acapy-cloud",
            namespace,
            ingress_domain,
            build_enabled,
            releases[release],
        )

    print(color.green("CloudAPI Installed"))

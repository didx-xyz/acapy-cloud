load("../utils/Tiltfile", "namespace_create_wrap", "generate_ingress_domain")
load("ext://color", "color")
load("ext://helm_resource", "helm_resource", "helm_repo")

# https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha
postgres_version = "15.1.7"
# https://github.com/rowanruseler/helm-charts/tree/main/charts/pgadmin4
pgadmin_version = "1.34.0"

registry = "localhost:5001"

# Detect CPU Architecture
cpu_arch = str(local("uname -m", echo_off=True, quiet=True)).lower().strip()


def setup_postgres(namespace):
    print(color.green("Installing Postgres..."))

    values_file = "./tilt/acapy-cloud/postgres.yaml"

    ## Setup HA Postgres
    # https://github.com/bitnami/charts/tree/main/bitnami/postgresql-ha
    helm_resource(
        name="postgres",
        chart="oci://registry-1.docker.io/bitnamicharts/postgresql-ha",
        release_name="postgres",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            # Due to bug in Askar (https://github.com/hyperledger/aries-askar/issues/299)
            # we can't use PGPool on first boot and we need to guarantee that we talk to
            # the primary Postgres instance.
            # So we set replicaCount to 1 to avoid accidentally talking to a RO replica.
            "--set",
            "postgresql.replicaCount=1",
            "--version",
            postgres_version,
            "--wait",
        ],
        labels=["04-dbs"],
        resource_deps=["cloudapi-ns", "istio"],
        deps=[values_file],
    )


def setup_pgadmin(namespace, ingress_domain):
    print(color.green("Installing pgAdmin..."))

    values_file = "./tilt/acapy-cloud/pgadmin.yaml"
    pgadmin_host = "pgadmin." + ingress_domain

    ## Setup pgAdmin
    # https://github.com/rowanruseler/helm-charts/tree/main/charts/pgadmin4
    helm_repo(
        name="runix",
        url="https://rowanruseler.github.io/helm-charts",
        resource_name="runix",
        labels=["10-helm-repos"],
    )
    helm_resource(
        name="pgadmin",
        chart="runix/pgadmin4",
        release_name="pgadmin",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            "--set",
            "ingress.hosts[0].host=" + pgadmin_host,
            "--version",
            pgadmin_version,
            "--wait",
        ],
        labels=["04-dbs"],
        resource_deps=[
            "cloudapi-ns",
            "runix",
            "ingress-nginx",
            "istio",
        ],
        deps=[values_file],
        auto_init=False,
    )
    k8s_resource(
        workload="pgadmin",
        links=[
            link("http://" + pgadmin_host, "pgAdmin"),
        ],
    )


def setup_nats(namespace):
    print(color.green("Installing NATS..."))

    chart_dir = "./helm/nats"
    values_file = chart_dir + "/values.yaml"

    ## Setup NATS
    # https://github.com/bitnami/charts/tree/main/bitnami/nats
    flags = []
    if config.tilt_subcommand == "ci":
        flags = [
            "--set",
            "nats.replicaCount=1",
        ]
    local_resource(
        name="build-nats",
        cmd="helm dep build --skip-refresh " + chart_dir,
        labels=["10-helm-repos"],
        allow_parallel=True,
    )
    helm_resource(
        name="nats",
        chart=chart_dir,
        release_name="nats",
        namespace=namespace,
        flags=[
            "--values",
            values_file,
            "--wait",
        ]
        + flags,
        labels=["03-streaming"],
        resource_deps=[
            "cloudapi-ns",
            "build-nats",
        ],
        port_forwards=[
            port_forward(8222, name="monitoring"),
            port_forward(4222, name="nats"),
        ],
        deps=[
            values_file,
            chart_dir + "/Chart.yaml",
            chart_dir + "/Chart.lock",
        ],
    )


def setup_redpanda_connect_cloud(namespace):
    print(color.green("Installing Redpanda Connect Cloud Processor..."))

    resource_name = "connect-cloud"
    project_root = os.getcwd()
    current_dir = os.path.abspath(os.path.dirname(__file__))
    values_file = project_root + "/helm/acapy-cloud/conf/local/connect-cloud.yaml"

    helm_repo(
        name="redpanda",
        url="https://charts.redpanda.com",
        resource_name="redpanda-repo-cloud",
        labels=["10-helm-repos"],
    )

    stream_config_dir = project_root + "/resources/connect-processors/cloud/streams"
    stream_config_files = [
        stream_config_dir + "/cloud-events.yaml",
        stream_config_dir + "/state-monitoring.yaml",
    ]
    from_file_args = " ".join(["--from-file=" + f for f in stream_config_files])
    # Create ConfigMap using kubectl but output only the YAML
    k8s_context = os.environ.get("KIND_K8S_CONTEXT")
    local_resource(
        name=resource_name + "-streams",
        cmd="kubectl --context="
        + k8s_context
        + " create configmap "
        + resource_name
        + "-streams"
        + " "
        + from_file_args
        + " --dry-run=client -o yaml"
        + " -n "
        + namespace
        + " | kubectl --context="
        + k8s_context
        + " apply -f - && "
        + "kubectl --context="
        + k8s_context
        + " delete pod -n "
        + namespace
        + " -l 'app.kubernetes.io/instance="
        + resource_name
        + "' --ignore-not-found=true",
        deps=stream_config_files,
        labels=["03-streaming"],
        allow_parallel=True,
        resource_deps=["cloudapi-ns"],
    )

    ## Create helm release
    # https://github.com/redpanda-data/helm-charts/tree/main/charts/connect
    helm_resource(
        name=resource_name,
        chart="redpanda/connect",
        release_name=resource_name,
        namespace=namespace,
        flags=[
            "--set",
            "fullnameOverride=" + resource_name,
            "--values",
            values_file,
            "--set",
            "streams.streamsConfigMap=" + resource_name + "-streams",
            "--version",
            "3.0.3",
        ],
        labels=["03-streaming"],
        resource_deps=[
            "cloudapi-ns",
            "redpanda-repo-cloud",
            "nats",
            "istio",
            resource_name + "-streams",
        ],
        deps=[
            values_file,
        ],
    )


def build_cloudapi_service(service, image={}):
    BBS_SUFFIX = "-bbs"
    if cpu_arch == "arm64":
        BBS_SUFFIX = ""
    # use custom_build instead of docker_build to support both docker and podman (in docker compatability mode)
    custom_build(
        registry + "/" + service,
        # Command to build the image using docker with insecure registry
        "docker build --network=host -t $EXPECTED_REF "
        + "--build-arg BBS_SUFFIX="
        + BBS_SUFFIX
        + " "
        + "--file="
        + image.get("dockerfile", "Dockerfile is required")
        + " "
        + image.get("context", ".")
        + " && docker push $EXPECTED_REF",
        deps=["./"],
        live_update=image.get("live_update", []),
        skips_local_docker=True,
        ignore=["**/tests/**"] + image.get("ignore", []),
    )
    return [registry + "/" + service]


def setup_cloudapi_service(
    release, chart, namespace, ingress_domain, build_enabled, release_config={}
):
    print(color.green("Installing " + release + "..."))

    image_deps = []
    image_keys = []

    flags = release_config.get("flags", [])

    if "image" in release_config:
        if build_enabled:
            image_deps = build_cloudapi_service(release, release_config["image"])
            image_keys = [("image.registry", "image.name", "image.tag")]
        else:
            print(color.yellow("Skipping Docker Build for " + release))
            # Use pre-existing image
            flags += [
                "--set",
                "image.registry=" + os.environ.get("REGISTRY", "ghcr.io/didx-xyz"),
                "--set",
                "image.tag=" + os.environ.get("IMAGE_TAG", "latest"),
            ]

    # Setup CloudAPI Service
    if release_config.get("enabled", True):
        values_file = chart + "/conf/local/" + release + ".yaml"
        helm_resource(
            name=release,
            chart=chart,
            release_name=release,
            namespace=namespace,
            image_deps=image_deps,
            image_keys=image_keys,
            flags=[
                "--values",
                values_file,
                "--set",
                "replicaCount=" + str(release_config.get("replicaCount", 1)),
                "--set",
                "ingressDomain=cloudapi." + ingress_domain,
                "--wait",
            ]
            + flags,
            labels=release_config.get("labels", ["01-cloudapi"]),
            resource_deps=[
                "cloudapi-ns",
                "ingress-nginx",
                "istio",
            ]
            + release_config.get("depends", []),
            deps=[values_file],
            port_forwards=release_config.get("port_forwards", []),
        )
        k8s_resource(workload=release, links=release_config.get("links", []))
    else:
        print(color.yellow("Skipping " + release + ", not enabled"))


def setup_ledger(namespace, build_enabled, ingress_domain):
    print(color.green("Installing Ledger..."))

    # Setup Ledger Nodes
    ledger_enabled = True
    if "x86_64" in cpu_arch:
        values_file = "./helm/ledger-nodes/conf/local/values.yaml"
        helm_resource(
            name="ledger-nodes",
            chart="./helm/ledger-nodes",
            release_name="ledger-nodes",
            namespace=namespace,
            flags=[
                "--values",
                values_file,
                "--wait",
            ],
            labels=["02-indy-ledger"],
            resource_deps=["cloudapi-ns"],
            deps=[values_file],
        )
        k8s_resource(
            workload="ledger-nodes",
        )
    else:
        # Incompatible CPU Architecture
        # Deploy Ledger Nodes and Browser via Docker Compose instead of Kind/Helm
        ledger_enabled = False
        print(
            color.yellow(
                "Skipping deploying Ledger Nodes to Kind, CPU Architecture not supported: "
                + cpu_arch
            )
        )
        print(color.yellow("Using docker compose for ledger nodes..."))

        von_dir = "tilt/.von-network"
        if not os.path.exists(von_dir):
            print(color.yellow("von-network not found, cloning von-network repo"))
            local(
                "git clone https://github.com/bcgov/von-network.git -b v1.8.0 "
                + von_dir,
                quiet=True,
            )

        if build_enabled:
            print(color.green("Docker Build of ledger-nodes for compose deployment..."))
            custom_build(
                registry + "/didx-xyz/acapy-cloud/ledger-nodes",
                "docker build --network=host -t $EXPECTED_REF "
                + "--platform=linux/amd64 "
                + "--file="
                + von_dir
                + "/Dockerfile "
                + von_dir
                + " && docker push $EXPECTED_REF",
                deps=[von_dir],
                skips_local_docker=True,
            )
        else:
            print(color.yellow("Skipping Docker Build for ledger-nodes"))

        # Only use env file if not in CI mode
        env_file_args = {}
        if config.tilt_subcommand != "ci":
            env_file_args["env_file"] = "./docker-compose-ledger.local.env"

        docker_compose("./docker-compose-ledger.yaml", wait=True, **env_file_args)
        dc_resource("ledger-nodes", labels=["02-indy-ledger"])
        dc_resource("ledger-browser", labels=["02-indy-ledger"])

    return ledger_enabled


def add_live_update(live_update_config, enabled):
    # live_update_config: List[Tuple[str, str]]
    # enabled: bool
    # return: List[sync]
    config = []
    if enabled:
        for src, dest in live_update_config:
            config.append(sync(src, dest))
        return config
    return []


def setup_cloudapi(build_enabled, expose):
    print(color.green("Installing CloudAPI..."))

    # Adopt and manage CloudAPI namespace
    namespace = namespace_create_wrap(
        namespace="cloudapi",
        namespace_labels=["istio-injection: enabled"],
        allow_duplicates=True,
    )

    ingress_domain = generate_ingress_domain(expose)
    print(color.green("Ingress Domain: " + ingress_domain))

    setup_postgres(namespace)
    setup_pgadmin(namespace, ingress_domain)
    setup_nats(namespace)
    setup_redpanda_connect_cloud(namespace)

    ledger_enabled = setup_ledger(namespace, build_enabled, ingress_domain)

    releases = {
        "endorser": {
            "depends": ["nats"],
            "image": {
                "dockerfile": "./dockerfiles/endorser/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./endorser", "/endorser"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "app/**",
                    "scripts/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "governance-agent": {
            "depends": ["nats", "postgres", "ledger-browser"],
            "links": [
                link(
                    "http://governance-agent.cloudapi." + ingress_domain,
                    "Governance Agent",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/agents/Dockerfile",
                "ignore": [
                    "app/**",
                    "endorser/**",
                    "shared/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "governance-web": {
            "depends": ["governance-agent", "multitenant-agent"],
            "links": [
                link(
                    "http://cloudapi." + ingress_domain + "/governance",
                    "Governance Web",
                ),
                link(
                    "http://cloudapi." + ingress_domain + "/governance/docs",
                    "Governance Web Docs",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "endorser/**",
                    "scripts/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "multitenant-agent": {
            "depends": ["nats", "postgres", "ledger-browser"],
            "links": [
                link(
                    "http://multitenant-agent.cloudapi." + ingress_domain,
                    "Multitenant Agent",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/agents/Dockerfile",
                "ignore": [
                    "app/**",
                    "endorser/**",
                    "shared/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "multitenant-web": {
            "depends": ["governance-agent", "multitenant-agent"],
            "links": [
                link(
                    "http://cloudapi." + ingress_domain + "/tenant-admin",
                    "Tenant Admin",
                ),
                link(
                    "http://cloudapi." + ingress_domain + "/tenant-admin/docs",
                    "Tenant Admin Docs",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "endorser/**",
                    "scripts/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "tenant-web": {
            "depends": ["governance-agent", "multitenant-agent"],
            "links": [
                link("http://cloudapi." + ingress_domain + "/tenant", "Tenant"),
                link(
                    "http://cloudapi." + ingress_domain + "/tenant/docs", "Tenant Docs"
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "endorser/**",
                    "scripts/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "public-web": {
            "depends": ["trust-registry"],
            "links": [
                link("http://cloudapi." + ingress_domain + "/public", "Public"),
                link(
                    "http://cloudapi." + ingress_domain + "/public/docs", "Public Docs"
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/app/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./app", "/app"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "endorser/**",
                    "scripts/**",
                    "trustregistry/**",
                    "waypoint/**",
                ],
            },
        },
        "trust-registry": {
            "depends": ["postgres"],
            "links": [
                link(
                    "http://trust-registry.cloudapi." + ingress_domain, "Trust Registry"
                ),
                link(
                    "http://trust-registry.cloudapi." + ingress_domain + "/docs",
                    "Trust Registry Docs",
                ),
            ],
            "image": {
                "dockerfile": "./dockerfiles/trustregistry/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./trustregistry", "/trustregistry"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "app/**",
                    "endorser/**",
                    "scripts/**",
                    "waypoint/**",
                ],
            },
        },
        "waypoint": {
            "depends": ["nats"],
            "links": [
                link("http://waypoint.cloudapi." + ingress_domain + "/docs", "Docs"),
            ],
            "image": {
                "dockerfile": "./dockerfiles/waypoint/Dockerfile",
                "live_update": add_live_update(
                    [
                        ("./waypoint", "/waypoint"),
                        ("./shared", "/shared"),
                    ],
                    enabled=build_enabled,
                ),
                "ignore": [
                    "app/**",
                    "endorser/**",
                    "scripts/**",
                    "trustregistry/**",
                ],
            },
        },
        "ledger-browser": {
            "depends": ["ledger-nodes"],
            "enabled": ledger_enabled,
            "labels": ["02-indy-ledger"],
            "port_forwards": [port_forward(9000, 8000, "Ledger Browser PF")],
            "links": [
                link(
                    "http://ledger-browser.cloudapi." + ingress_domain, "Ledger Browser"
                ),
            ],
        },
        "mediator": {
            "depends": [
                "postgres",
                "governance-agent",
                "multitenant-agent",
            ],
            "links": [
                link("http://mediator.cloudapi." + ingress_domain, "Mediator"),
            ],
        },
        "tails-server": {
            "links": [
                link("http://tails.cloudapi." + ingress_domain, "Tails"),
            ]
        },
    }

    for release in releases:
        setup_cloudapi_service(
            release,
            "./helm/acapy-cloud",
            namespace,
            ingress_domain,
            build_enabled,
            releases[release],
        )

    print(color.green("CloudAPI Installed"))

load("ext://namespace", "namespace_inject", "namespace_create")
load("ext://uibutton", "cmd_button", "location", "text_input")


###
# Namespace Manipulation
###
def namespace_create_wrap(
    namespace, allow_duplicates=False, namespace_labels=[], resource_labels=[]
):
    ns = namespace_create(
        name=namespace,
        allow_duplicates=allow_duplicates,
        annotations=[],
        labels=namespace_labels,
    )

    k8s_resource(
        new_name=namespace + "-ns",
        objects=[namespace + ":namespace"],
        labels=["20-namespaces"] + resource_labels,
    )

    return namespace


def namespace_patch(x, ns):
    """This is a wrapper of the namespace_inject function from the default tilt extension (ext://namespace) for convenience.
     It useTakes K8s yaml, sets its namespace to `ns`, and returns it as a blob.

    This modifies the yaml in two ways:
    1. Sets .metadata.namespace to `ns`
    2. Sets ..template.metadata.namespace to `ns`
       This ensures the namespace in, e.g., Deployment Pod Template Specs is
       set, but might have false positives if you have a CRD with some other
       element named 'template'.

    Args:
      x: K8s yaml. Either a filename (string) or the yaml itself (Blob)
      ns: The namespace to set the K8s objects to.

    Returns:
      Blob containing the K8s objects as yaml, with namespaces set to `ns`.
    """
    return namespace_inject(x, ns)


###
# String Manipulation
###
def truncate_from_char(original, char):
    index = original.find(char)
    if index >= 0:
        return original[:index]
    return original


###
# Tilt CLI Functions
###
# Enable all resources
def enable_all_resources():
    print("Enabling all resources...")
    local("tilt enable --all")
    print("Enabled all resources. By Order!!!")


# Disable all resources
def disable_all_resources():
    print("Diabling all resources...")
    local("tilt disable --all")
    print("Disabled all resources. By Order!!!")


###

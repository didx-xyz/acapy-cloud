# https://mise.jdx.dev
[tools]
"aqua:nats-io/natscli" = "0.1"
helm = "3"
helmfile = "0.170"
istioctl = "1.24"
kind = "0.26"
kubectl = "1.32"
poetry = "2.0"
pre-commit = "4.0"
python = "3.12"
tilt = "0.33"
usage = "latest"
uv = "0.5"

[settings]
experimental = true
# Prevent Mise from running multiple jobs at the same time.
# Prevents `poetry install` from running in parallel which
#   results in multiple threads trying to write to the same file.
jobs = 1
# Use UV instead of pipx for installing Python binaries
pipx_uvx = true
# Install precompiled python binary
python_compile = false

[env]
DOCKER_HOST_OVERRIDE = "unix:///var/run/docker.sock"
KIND_CLUSTER_NAME = "aries-cloudapi"
KIND_K8S_CONTEXT = "kind-{{env.KIND_CLUSTER_NAME}}"
KIND_DOCKER_CACHE = "docker-cache"
KIND_DOCKER_REGISTRY = "docker-registry"
KIND_DOCKER_REGISTRY_PORT = "5001"
# Use Python/Mise managed virtual environment
POETRY_VIRTUALENVS_CREATE = "false"
# Setup Python Virtual Environment
_.python.venv = { path = ".venv", create = true }

[tasks."poetry:install"]
description = "Poetry Install dependencies for all submodules"
depends = ["poetry:install:*"]

[tasks."poetry:update"]
description = "Poetry Update lockfiles for all submodules"
depends = ["poetry:update:*"]

[tasks."tilt:up"]
description = "Start Tilt"
depends = ["kind:create"]
run = "tilt up"

[tasks."tilt:up:podman"]
description = "Start Tilt with Podman"
depends = ["kind:create"]
run = "DOCKER_HOST=$DOCKER_HOST_OVERRIDE tilt up"

[tasks."tilt:up:expose"]
description = "Start Tilt with `--expose` flag"
depends = ["kind:create"]
run = "tilt up -- --expose"

[tasks."tilt:down"]
description = "Tilt Down"
run = "tilt down"

[tasks."tilt:down:destroy"]
description = "Tilt Down Destroy"
run = "tilt down -- --destroy"

[tasks."tilt:down:destroy:all"]
description = "Tilt Down Destroy everything, including Docker Cache"
run = "tilt down -- --destroy-all"

[tasks."tilt:ci"]
description = "Start Tilt in CI mode"
depends = ["kind:create"]
run = "tilt ci -- --no-build"

[tasks."kind:destroy:all"]
description = "Destroy Kind and delete Docker Registry & Cache"
run = """
#!/bin/bash
mise run kind:destroy --destroy-registry-containers"
rm -rf tilt/docker
"""

[tasks.tests]
description = "Run all tests"
depends = ["poetry:install"]
run = """
#!/bin/bash
cp .env.example .env
source .env
poetry run pytest . --ignore ./tilt $@
"""

[tasks."tests:unit"]
description = "Run unit tests"
depends = ["poetry:install"]
run = "poetry run pytest app --ignore=app/tests/e2e $@"

[tasks."tests:e2e"]
description = "Run e2e tests"
depends = ["poetry:install"]
run = """
#!/bin/bash
cp .env.example .env
source .env
# pytest app/tests/e2e
poetry run pytest --dist loadfile app/tests/e2e $@
"""

[tasks.fmt]
description = "Format files"
run = """
#!/bin/bash
isort . --profile black --diff
black . --diff
find . -type f -name "Tiltfile" | while read -r file; do
    black "$file"
  done
"""

[tasks."fmt:check"]
description = "Check all files for formatting"
run = """
#!/bin/bash
isort . --check --profile black --diff
black . --check --diff
find . -type f -name "Tiltfile" | while read -r file; do
    black --check --diff "$file"
  done
"""

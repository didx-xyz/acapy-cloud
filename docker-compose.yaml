version: "3"

services:
  governance-fastapi:
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    ports:
      - "8000:8000"
    volumes:
      - ./shared_models/shared_models.py:/app/shared_models.py
      - ./app:/app
      - ./environments/governance-agent/fastapi.default.env:/app/.env
    depends_on:
      - governance-wallet-db
      - ledger-nodes
      - ledger-browser
    networks:
      - governance
      - host
    env_file:
      - environments/governance-agent/fastapi.default.env
  governance-wallet-db:
    image: postgres:11
    command: postgres -c listen_addresses='*'
    env_file:
      - environments/governance-agent/db.default.env
    volumes:
      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - governance
      - host
    tty: true
  # ngrok-governance-agent:
  #   image: wernight/ngrok
  #   env_file:
  #     - environments/governance-agent/aca-py-agent.default.env
  #   command: ngrok http governance_acapy_agent:3020 --log stdout
  #   networks:
  #     - governance-agent
  #     - host
  #   depends_on:
  #     - ledger-nodes
  #     - ledger-browser
  governance-acapy-agent:
    build:
      context: .
      dockerfile: dockerfiles/agents/Dockerfile.agent
    env_file:
      - environments/governance-agent/aca-py-agent.default.env
    ports:
      - 3020:3020
      - 3021:3021
    depends_on:
      - governance-wallet-db
      - ledger-nodes
      - ledger-browser
    networks:
      - governance
      - host
    extra_hosts:
      - "host.docker.internal:host-gateway"
  ecosystem-trust-registry:
    build:
      context: .
      dockerfile: ./dockerfiles/trustregistry/Dockerfile
    env_file:
      - environments/trustregistry/trustregistry.default.env
    ports:
      - "8001:8001"
    volumes:
      - ./trustregistry:/trustregistry
    networks:
      - governance
      - ecosystem
      - host
  ecosystem-multitenant-fastapi:
    build:
      context: .
      dockerfile: ./dockerfiles/fastapi/Dockerfile
    ports:
      - "8100:8000"
    volumes:
      - ./shared_models/shared_models.py:/app/shared_models.py
      - ./app:/app
      - ./environments/multitenant-agent/fastapi.default.env:/app/.env
    depends_on:
      - ecosystem-multitenant-wallets-db
      - ledger-nodes
      - ledger-browser
    networks:
      - ecosystem
      - host
    env_file:
      - environments/multitenant-agent/fastapi.default.env
  webhooks-web:
    build:
      context: .
      dockerfile: ./dockerfiles/webhooks/Dockerfile
    ports:
      - "3010:3010"
    volumes:
      - ./shared_models/shared_models.py:/webhooks/shared_models.py
      - ./webhooks:/webhooks
    networks:
      - ecosystem
      - governance
      - host
    env_file:
      - environments/webhooks/fastapi.webhooks.env
    environment:
      - REDIS_URL=redis://wh-redis
  wh-redis:
    image: redis:latest
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - $PWD/data:/data
    networks:
      - host
    env_file:
      - environments/webhooks/redis.env
  ecosystem-multitenant-wallets-db:
    image: postgres:11
    command: postgres -c listen_addresses='*'
    env_file:
      - environments/multitenant-agent/db.default.env
    volumes:
      - ./resources/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecosystem
      - host
    tty: true
  ngrok-multitenant:
    image: wernight/ngrok
    env_file:
      - environments/multitenant-agent/aca-py-agent.default.env
    command: ngrok http ecosystem-multitenant-agent:3020 --log stdout
    networks:
      - ecosystem
      - host
    depends_on:
      - ledger-nodes
      - ledger-browser
  ecosystem-multitenant-acapy-agent:
    build:
      context: .
      dockerfile: dockerfiles/agents/Dockerfile.agent
    env_file:
      - environments/multitenant-agent/aca-py-agent.default.env
    ports:
      - 4020:3020
      - 4021:3021
    depends_on:
      - ecosystem-multitenant-wallets-db
      - ledger-nodes
      - ledger-browser
    networks:
      - ecosystem
      - governance
      - host
  ledger-browser:
    build:
      context: https://github.com/didx-xyz/von-network.git
      dockerfile: Dockerfile
    command: "bash -c 'sleep 5; ./scripts/start_webserver.sh; sleep 60'"
    environment:
      - DOCKERHOST=${DOCKERHOST}
      - MAX_FETCH=50000
      - RESYNC_TIME=120
      - REGISTER_NEW_DIDS=True
      - LEDGER_INSTANCE_NAME=localhost
    ports:
      - ${WEB_SERVER_HOST_PORT:-9000}:8000
    volumes:
      - webserver-cli:/home/indy/.indy-cli
      - webserver-ledger:/home/indy/ledger
    networks:
      - ecosystem
      - governance
      - host
    depends_on:
      - ledger-nodes
  ledger-nodes:
    build:
      context: https://github.com/didx-xyz/von-network.git
      dockerfile: Dockerfile
    command: "bash -c 'sleep 15; ./scripts/start_nodes.sh; sleep 60'"
    ports:
      - 9701:9701
      - 9702:9702
      - 9703:9703
      - 9704:9704
      - 9705:9705
      - 9706:9706
      - 9707:9707
      - 9708:9708
    environment:
      - DOCKERHOST=${DOCKERHOST}
    volumes:
      - nodes-data:/home/indy/ledger
    networks:
      - ecosystem
      - governance
      - host
  tails-server:
    build:
      # The #main is required for some docker-compose versions because it otherwise tries to use master branch which does not exist n
      context: https://github.com/bcgov/indy-tails-server.git#main
      dockerfile: docker/Dockerfile.tails-server
    ports:
      - 6543:6543
    networks:
      - ecosystem
      - governance
      - host
    environment:
      - DOCKERHOST=${DOCKERHOST}
    command: >
      tails-server
        --host 0.0.0.0
        --port 6543
        --storage-path $STORAGE_PATH
        --log-level INFO

volumes:
  webserver-cli:
  webserver-ledger:
  nodes-data:
  data:

networks:
  ecosystem:
  governance:
  host:

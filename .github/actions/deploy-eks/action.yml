name: Deploy EKS
description: Deploy to EKS

inputs:
  aws-region:
    description: The AWS region where the EKS cluster is located
    required: true
  aws-role-arn:
    description: The ARN of the AWS role to assume
    required: true
  aws-role-session-name:
    description: The name of the AWS role session
    required: true
  clean-start:
    description: Whether to clean up the EKS cluster before deploying
    required: false
    default: "false"
  cluster-name:
    description: The name of the EKS cluster
    required: true
  environment:
    description: The environment to deploy to
    required: true
  helm-version:
    description: The version of Helm to use
    required: true
  helmfile-path:
    description: The path to the Helmfile to use
    required: false
    default: ./helm/acapy-cloud.yaml.gotmpl
  helmfile-plugins:
    description: The Helmfile plugins to install
    required: false
    default: https://github.com/databus23/helm-diff
  helmfile-version:
    description: The version of Helmfile to use
    required: true
  image-tag:
    description: The tag of the Docker image to deploy
    required: true
  namespace:
    description: The Kubernetes namespace to deploy to
    required: true
  connect-configs-dir:
    description: The directory containing the Redpanda Connect configurations
    required: true
    default: ./resources/connect-processors/cloud

runs:
  using: composite

  steps:
    - name: Configure AWS credentials
      # https://github.com/aws-actions/configure-aws-credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ inputs.aws-region }}
        role-to-assume: ${{ inputs.aws-role-arn }}
        role-session-name: ${{ inputs.aws-role-session-name }}

    - name: Update Kubeconfig
      shell: bash
      run: aws eks update-kubeconfig --name $CLUSTER_NAME --region $REGION
      env:
        CLUSTER_NAME: ${{ inputs.cluster-name }}
        REGION: ${{ inputs.aws-region }}

    - name: Helmfile Destroy
      if: inputs.clean-start == 'true'
      # https://github.com/helmfile/helmfile-action
      uses: helmfile/helmfile-action@v2
      with:
        helmfile-args: |
          destroy \
            --environment ${{ inputs.environment }} \
            -f ${{ inputs.helmfile-path }} \
            --state-values-set namespace=${{ inputs.namespace }}
        helm-plugins: ${{ inputs.helmfile-plugins }}
        helmfile-version: ${{ inputs.helmfile-version }}
        helm-version: ${{ inputs.helm-version }}

    - name: Create Redpanda Connect Stream ConfigMap
      shell: bash
      # https://docs.redpanda.com/redpanda-connect/get-started/quickstarts/helm-chart/#run-multiple-pipelines-in-streams-mode
      run: |
        kubectl create configmap connect-cloud-pipelines \
          --from-file=${CONFIGS_DIR}/pipelines \
          --dry-run=client \
          -o yaml \
          -n $NAMESPACE | kubectl apply -f -
        kubectl create configmap connect-cloud-resources \
          --from-file=${CONFIGS_DIR}/resources \
          --dry-run=client \
          -o yaml \
          -n $NAMESPACE | kubectl apply -f -
        kubectl -n $NAMESPACE rollout restart deploy/connect-cloud || true
      env:
        NAMESPACE: ${{ inputs.namespace }}
        CONFIGS_DIR: ${{ inputs.connect-configs-dir }}
    - name: Helmfile Apply
      # https://github.com/helmfile/helmfile-action
      uses: helmfile/helmfile-action@v2
      with:
        helmfile-args: |
          apply \
            --environment ${{ inputs.environment }} \
            -f ${{ inputs.helmfile-path }} \
            --state-values-set image.tag=${{ inputs.image-tag }} \
            --state-values-set image.registry=ghcr.io/${{ github.repository_owner }} \
            --state-values-set pgProxyEnabled=${{ inputs.clean-start == 'false' }} \
            --state-values-set namespace=${{ inputs.namespace }}
        helm-plugins: ${{ inputs.helmfile-plugins }}
        helmfile-version: ${{ inputs.helmfile-version }}
        helm-version: ${{ inputs.helm-version }}

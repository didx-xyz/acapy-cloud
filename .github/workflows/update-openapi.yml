name: Update OpenAPI

on:
  workflow_call:
    inputs:
      image-version:
        description: Image version to run
        required: true
        type: string
      pr-number:
        description: Pull request number (if triggered by a PR)
        required: false
        type: number
        default: 0
    secrets:
      devops-app-id:
        required: true
      devops-private-key:
        required: true

permissions: {}

jobs:
  diff:
    name: Diff
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    services:
      tenant-admin:
        image: ghcr.io/didx-xyz/acapy-cloud/app:${{ inputs.image-version }}
        ports:
          - 8080:8000
        env:
          OPENAPI_NAME: CloudAPI Multitenant Admin
          ROLE: tenant-admin
          ROOT_PATH: /tenant-admin
      tenant:
        image: ghcr.io/didx-xyz/acapy-cloud/app:${{ inputs.image-version }}
        ports:
          - 8181:8000
        env:
          OPENAPI_NAME: CloudAPI Tenant
          ROLE: tenant
          ROOT_PATH: /tenant

    steps:
      - name: Log in to DIDx DevOps
        id: devops_login
        uses: actions/create-github-app-token@df432ceedc7162793a195dd1713ff69aefc7379e # v2.0.6
        with:
          app-id: ${{ secrets.devops-app-id }}
          private-key: ${{ secrets.devops-private-key }}

      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: ${{ github.event_name != 'pull_request' }}
          ref: ${{ github.event_name == 'pull_request' && github.event.pull_request.head.sha || github.event.repository.default_branch }}
          token: ${{ steps.devops_login.outputs.token }}

      - name: Check if services are up
        run: |
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/tenant-admin/openapi.json; then
              echo "Tenant Admin service is up"
              break
            fi
            sleep 5
          done

          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8181/tenant/openapi.json; then
              echo "Tenant service is up"
              break
            fi
            sleep 5
          done

      - name: Download OpenAPI Specs
        run: |
          curl -s http://localhost:8080/tenant-admin/openapi.json | jq . > ./docs/openapi/tenant-admin-openapi.json
          curl -s http://localhost:8080/tenant-admin/openapi.yaml | yq . > ./docs/openapi/tenant-admin-openapi.yaml

          curl -s http://localhost:8181/tenant/openapi.json | jq . > ./docs/openapi/tenant-openapi.json
          curl -s http://localhost:8181/tenant/openapi.yaml | yq . > ./docs/openapi/tenant-openapi.yaml

      - name: Generate diffs
        if: github.event_name == 'pull_request'
        run: |
          mkdir -p ./diffs

          git diff ./docs/openapi/tenant-admin-openapi.json > ./diffs/tenant-admin-openapi.json.diff
          git diff ./docs/openapi/tenant-admin-openapi.yaml > ./diffs/tenant-admin-openapi.yaml.diff

          git diff ./docs/openapi/tenant-openapi.json > ./diffs/tenant-openapi.json.diff
          git diff ./docs/openapi/tenant-openapi.yaml > ./diffs/tenant-openapi.yaml.diff

      - name: Comment on PR
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: github.event_name == 'pull_request'
        env:
          PR_NUMBER: ${{ inputs.pr-number }}
        with:
          github-token: ${{ steps.devops_login.outputs.token }}
          script: |
            const fs = require('fs');

            // Function to check if a file exists and has content
            function hasContent(filePath) {
              try {
                return fs.existsSync(filePath) && fs.statSync(filePath).size > 0;
              } catch (error) {
                return false;
              }
            }

            // Read diff files and determine if there are changes
            const specs = [
              { file: 'tenant-admin-openapi.json.diff', name: 'Tenant Admin API (JSON)' },
              { file: 'tenant-admin-openapi.yaml.diff', name: 'Tenant Admin API (YAML)' },
              { file: 'tenant-openapi.json.diff', name: 'Tenant API (JSON)' },
              { file: 'tenant-openapi.yaml.diff', name: 'Tenant API (YAML)' }
            ];

            // Track if we have changes
            let hasChanges = false;

            // Filter to specs with changes and read their content
            const specsWithChanges = specs.filter(spec => {
              const hasContentResult = hasContent(`./diffs/${spec.file}`);
              if (hasContentResult) hasChanges = true;
              return hasContentResult;
            }).map(spec => {
              return {
                ...spec,
                content: fs.readFileSync(`./diffs/${spec.file}`, 'utf8')
              };
            });

            // Create the PR comment
            const COMMENT_IDENTIFIER = "<!-- openapi-diff-check -->";
            let commentBody = `${COMMENT_IDENTIFIER}\n## OpenAPI Specification Changes\n\n`;

            if (hasChanges) {
              commentBody += `### ‚ö†Ô∏è Merging this PR will result in the following changes to the OpenAPI Specification:\n\n`;

              specsWithChanges.forEach(spec => {
                commentBody += `<details>\n<summary><strong>üîç ${spec.name}</strong> - Changes detected</summary>\n\n`;
                commentBody += "```diff\n" + spec.content + "\n```\n\n";
                commentBody += `</details>\n\n`;
              });

              commentBody += `\nPlease update the OpenAPI specifications to resolve these differences.\n`;
            } else {
              commentBody = `${COMMENT_IDENTIFIER}\n## ‚úÖ All OpenAPI Specifications are in sync\n\n`;
              commentBody += `No differences were detected in the OpenAPI specifications.`;
            }

            // Check if PR number is provided
            const prNumber = parseInt(process.env.PR_NUMBER, 10);
            if (!prNumber) {
              console.log('PR number not provided, skipping PR comment creation');
              return;
            }

            // Get existing comments
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber
            });

            // Find our existing comment
            const existingComment = comments.data.find(comment =>
              comment.body.includes(COMMENT_IDENTIFIER)
            );

            // Either update the existing comment or create a new one
            if (existingComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('Updated existing OpenAPI diff comment');
            } else if (hasChanges) {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log(`Created OpenAPI diff comment on PR #${prNumber}`);
            }

      - name: Commit and open PR for OpenAPI spec changes
        if: github.event_name != 'pull_request' && github.ref_name == github.event.repository.default_branch
        env:
          HEAD_BRANCH: devops/sync-openapi
          BASE_BRANCH: ${{ github.event.repository.default_branch }}
          GITHUB_TOKEN: ${{ steps.devops_login.outputs.token }}
          REPO: ${{ github.repository }}
        run: |
          git config --local user.name "didx-devops[bot]"
          git config --local user.email "didx-devops[bot]@users.noreply.github.com"

          # Create a new branch for the changes
          git checkout -b ${HEAD_BRANCH}

          # Check if there are any changes
          if [[ -n "$(git status --porcelain ./docs/openapi)" ]]; then
            echo "Changes detected in OpenAPI specs, preparing to commit and push"

            # Commit and push changes
            git add ./docs/openapi/
            git commit -m ":memo: Sync OpenAPI Spec"
            git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git
            git push --set-upstream origin ${HEAD_BRANCH} --force
            echo "OpenAPI specs updated and pushed to repository"

            # Check if PR already exists
            pr_exists=$(gh pr list --repo ${REPO} --base ${BASE_BRANCH} --head ${HEAD_BRANCH} --json number --jq '.[0].number')
            if [[ -n "${pr_exists}" ]]; then
              echo "Pull request #${pr_exists} already exists for syncing OpenAPI Spec"
            else
              gh pr create \
                --repo ${REPO} \
                --base ${BASE_BRANCH} \
                --head ${HEAD_BRANCH} \
                --title ":memo: Sync OpenAPI Spec" \
                --body "This PR syncs the OpenAPI Spec with the latest code changes.\n\nPlease review and merge." \
                --label documentation
              echo "Pull request created for OpenAPI spec changes"
            fi
          else
            echo "No changes to OpenAPI specs detected"
          fi

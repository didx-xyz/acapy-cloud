name: Update OpenAPI

on:
  workflow_call:
    inputs:
      image-version:
        description: Image version to run
        required: true
        type: string
      pr-number:
        description: Pull request number (if triggered by a PR)
        required: false
        type: number

permissions: {}

jobs:
  diff:
    name: Diff
    runs-on: ubuntu-latest

    permissions:
      contents: write
      pull-requests: write

    services:
      tenant-admin:
        image: ghcr.io/didx-xyz/acapy-cloud/app:${{ inputs.image-version }}
        ports:
          - 8080:8000
        env:
          OPENAPI_NAME: CloudAPI Multitenant Admin
          ROLE: tenant-admin
          ROOT_PATH: /tenant-admin
      tenant:
        image: ghcr.io/didx-xyz/acapy-cloud/app:${{ inputs.image-version }}
        ports:
          - 8181:8000
        env:
          OPENAPI_NAME: CloudAPI Tenant
          ROLE: tenant
          ROOT_PATH: /tenant

    steps:
      - name: Checkout code
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false

      - name: Check if services are up
        run: |
          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8080/tenant-admin/openapi.json; then
              echo "Tenant Admin service is up"
              break
            fi
            sleep 5
          done

          for i in {1..10}; do
            if curl -s -o /dev/null -w "%{http_code}" http://localhost:8181/tenant/openapi.json; then
              echo "Tenant service is up"
              break
            fi
            sleep 5
          done

      - name: Download OpenAPI Specs
        run: |
          mkdir -p ./tmp

          curl -s http://localhost:8080/tenant-admin/openapi.json | jq . > ./tmp/tenant-admin-openapi.json
          curl -s http://localhost:8080/tenant-admin/openapi.yaml | yq . > ./tmp/tenant-admin-openapi.yaml

          curl -s http://localhost:8181/tenant/openapi.json | jq . > ./tmp/tenant-openapi.json
          curl -s http://localhost:8181/tenant/openapi.yaml | yq . > ./tmp/tenant-openapi.yaml

      - name: Debug
        run: |
          ls -la ./tmp
          ls -la ./docs/openapi

      - name: Running OpenAPI Spec diff action (Tenant Admin JSON)
        uses: oasdiff/oasdiff-action/diff@d68e4d01cb0ba24b6811df1e190f2a640169ea6d # main
        id: tenant-admin-json
        with:
          base: ./docs/openapi/tenant-admin-openapi.json
          revision: ./tmp/tenant-admin-openapi.json
          format: markdown
          include-path-params: true

      - name: Running OpenAPI Spec diff action (Tenant Admin YAML)
        uses: oasdiff/oasdiff-action/diff@d68e4d01cb0ba24b6811df1e190f2a640169ea6d # main
        id: tenant-admin-yaml
        with:
          base: ./docs/openapi/tenant-admin-openapi.yaml
          revision: ./tmp/tenant-admin-openapi.yaml
          format: markdown
          include-path-params: true

      - name: Running OpenAPI Spec diff action (Tenant JSON)
        uses: oasdiff/oasdiff-action/diff@d68e4d01cb0ba24b6811df1e190f2a640169ea6d # main
        id: tenant-json
        with:
          base: ./docs/openapi/tenant-openapi.json
          revision: ./tmp/tenant-openapi.json
          format: markdown
          include-path-params: true

      - name: Running OpenAPI Spec diff action (Tenant YAML)
        uses: oasdiff/oasdiff-action/diff@d68e4d01cb0ba24b6811df1e190f2a640169ea6d # main
        id: tenant-yaml
        with:
          base: ./docs/openapi/tenant-openapi.yaml
          revision: ./tmp/tenant-openapi.yaml
          format: markdown
          include-path-params: true

      - name: Create OpenAPI diff PR review
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        if: inputs.pr-number != ''
        with:
          script: |
            const tenantAdminJsonDiff = `${{ steps.tenant-admin-json.outputs.diff }}`;
            const tenantAdminYamlDiff = `${{ steps.tenant-admin-yaml.outputs.diff }}`;
            const tenantJsonDiff = `${{ steps.tenant-json.outputs.diff }}`;
            const tenantYamlDiff = `${{ steps.tenant-yaml.outputs.diff }}`;

            // Unique identifier for our bot's review comments
            const BOT_COMMENT_IDENTIFIER = "<!-- openapi-diff-reviewer -->";

            // Map for spec information
            const specChanges = [
              {
                name: 'Tenant Admin API (JSON)',
                path: 'docs/openapi/tenant-admin-openapi.json',
                diff: tenantAdminJsonDiff,
                hasChanges: tenantAdminJsonDiff !== 'No changes'
              },
              {
                name: 'Tenant Admin API (YAML)',
                path: 'docs/openapi/tenant-admin-openapi.yaml',
                diff: tenantAdminYamlDiff,
                hasChanges: tenantAdminYamlDiff !== 'No changes'
              },
              {
                name: 'Tenant API (JSON)',
                path: 'docs/openapi/tenant-openapi.json',
                diff: tenantJsonDiff,
                hasChanges: tenantJsonDiff !== 'No changes'
              },
              {
                name: 'Tenant API (YAML)',
                path: 'docs/openapi/tenant-openapi.yaml',
                diff: tenantYamlDiff,
                hasChanges: tenantYamlDiff !== 'No changes'
              }
            ];

            const hasAnyChanges = specChanges.some(spec => spec.hasChanges);

            // Always create a step summary
            const fs = require('fs');
            let summaryContent = '## OpenAPI Specification Changes\n\n';

            specChanges.forEach(spec => {
              if (spec.hasChanges) {
                summaryContent += `### ${spec.name}\n\n${spec.diff}\n\n`;
              }
            });

            if (!hasAnyChanges) {
              summaryContent += 'No changes detected in any OpenAPI specification.\n';
            }

            fs.appendFileSync(process.env.GITHUB_STEP_SUMMARY, summaryContent);
            console.log('Added OpenAPI diff results to the step summary');

            // Get PR number
            const prNumber = parseInt('${{ inputs.pr-number }}', 10);

            // List existing review comments
            const reviewComments = await github.rest.pulls.listReviewComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            // Filter for comments that contain our identifier
            const botReviewComments = reviewComments.data.filter(comment =>
              comment.body.includes(BOT_COMMENT_IDENTIFIER)
            );

            // Map spec names to existing comment IDs
            const existingComments = new Map();

            for (const comment of botReviewComments) {
              for (const spec of specChanges) {
                if (comment.body.includes(spec.name) && comment.path === spec.path) {
                  existingComments.set(spec.name, comment);
                  break;
                }
              }
            }

            // Process each spec
            const newComments = [];

            for (const spec of specChanges) {
              const existingComment = existingComments.get(spec.name);

              if (spec.hasChanges) {
                // Format comment body
                const commentBody = `${BOT_COMMENT_IDENTIFIER}\n## ${spec.name}\n\n${spec.diff}`;

                if (existingComment) {
                  // Update existing comment
                  await github.rest.pulls.updateReviewComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    comment_id: existingComment.id,
                    body: commentBody
                  });
                  console.log(`Updated existing review comment for ${spec.name}`);
                } else {
                  // Create new comment in next review
                  newComments.push({
                    path: spec.path,
                    line: 1,
                    body: commentBody
                  });
                }
              } else if (existingComment) {
                // Spec no longer has changes, update comment to indicate issue is fixed
                const resolvedComment = `${BOT_COMMENT_IDENTIFIER}\n## ${spec.name}\n\n~~Previous changes~~\n\n**âœ… Changes have been addressed. You can now resolve this conversation.**`;

                await github.rest.pulls.updateReviewComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  comment_id: existingComment.id,
                  body: resolvedComment
                });
                console.log(`Marked comment for ${spec.name} as resolved`);
              }
            }

            // Submit new review with comments if there are any new comments
            if (newComments.length > 0) {
              await github.rest.pulls.createReview({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                comments: newComments,
                event: 'COMMENT'
              });
              console.log(`Created review with ${newComments.length} new comments on PR #${prNumber}`);
            }

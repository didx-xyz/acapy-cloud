name: Local Tests

on:
  workflow_call:
    inputs:
      image-version:
        required: true
        type: string
      mise-version:
        required: true
        type: string
    secrets:
      codacy-token:
        required: true
      cheqd-mnemonic:
        required: true

permissions: {}

jobs:
  local:
    name: Local End-to-End
    runs-on: ubuntu-latest

    timeout-minutes: 30

    steps:
      - uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2
        with:
          persist-credentials: false
          submodules: recursive

      - name: Cache Python venv
        uses: actions/cache@5a3ec84eff668545956fd18022155c47e93e2684 # v4.2.3
        with:
          path: .venv
          key: python-${{ hashFiles('**/poetry.lock', '.mise.toml') }}

      - name: Set up Mise
        uses: jdx/mise-action@c37c93293d6b742fc901e1406b8f764f6fb19dac # v2.4.4
        with:
          version: ${{ inputs.mise-version }}
          cache: true
          experimental: true # Required for mise tasks
          install: true
        env:
          MISE_JOBS: 4
      - name: Load Mise env
        run: |
          mise env -s bash \
              | grep -v 'export PATH=' \
              | cut -d' ' -f2 \
              >> "$GITHUB_ENV"
      - name: Install dependencies with Poetry
        run: mise run poetry:install
        env:
          MISE_JOBS: 1

      - name: Start Test Harness
        run: mise run tilt:ci
        shell: bash
        env:
          FEE_PAYER_TESTNET_MNEMONIC: ${{ secrets.cheqd-mnemonic }}
          IMAGE_TAG: ${{ inputs.image-version }}
          REGISTRY: ghcr.io/${{ github.repository_owner }}

      - name: Test with pytest
        run: |
          source .venv/bin/activate
          set +e

          cp .env.example .env
          source .env

          poetry run pytest \
            --durations=25 \
            --ignore ./tilt \
            --ignore ./acapy \
            --ignore ./plugins \
            --cov | tee test_output.txt

          EXIT_CODE=${PIPESTATUS[0]}
          set -e
          echo "Exit code: $EXIT_CODE"

          # very hacky way to get around the fact that teardown fails even if tests pass
          TEARDOWN_ERROR=false
          SINGLE_ERROR=false
          TEST_FAILURES=0

          if grep -q "ERROR at teardown" test_output.txt; then
              echo "ERROR at teardown"
              TEARDOWN_ERROR=true
          fi

          if grep -q ", 1 error in" test_output.txt; then
              echo "Only 1 error total"
              SINGLE_ERROR=true
          fi

          # Count the number of test failures
          TEST_FAILURES=$(grep -c "^FAILED" test_output.txt || true)
          echo "Number of test failures: $TEST_FAILURES"

          if [ "$TEARDOWN_ERROR" = true ] && [ "$SINGLE_ERROR" = true ] && [ "$TEST_FAILURES" -eq 0 ]; then
              echo "Tests passed with teardown error"
              exit 0
          else
              if [ "$EXIT_CODE" -ne 0 ]; then
                echo "test_success=false" >> $GITHUB_OUTPUT
              else
                echo "test_success=true" >> $GITHUB_OUTPUT
              fi
              exit $EXIT_CODE
          fi

      - name: Install coverage and generate report
        run: |
          source .venv/bin/activate
          coverage report
          coverage xml -i  # Ignore potential "No source for code" errors
          sudo rm -rf tilt/docker
      - name: Upload coverage to Codacy
        run: bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.codacy-token }}
      - name: Upload coverage file as artifact
        uses: actions/upload-artifact@ea165f8d65b6e75b540449e92b4886f43607fa02 # v4.6.2
        with:
          name: coverage
          path: .coverage
          include-hidden-files: true

      - name: Get Docker Containers
        if: always()
        run: docker ps -a
      - name: Get Pods
        if: always()
        run: kubectl get pods --all-namespaces
      - name: Get Helm Releases
        if: always()
        run: helm list --all-namespaces
      - name: Connect Cloud Logs
        # Connect Cloud can generate a lot of logs...
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=connect-cloud --tail 10000
      - name: Cheqd Noded Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=cheqd --tail 10000
      - name: Cheqd DID Registrar Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=driver-did-cheqd --tail 10000
      - name: Cheqd DID Resolver Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=did-resolver --tail 10000
      - name: DID Registrar (Universal Registrar) Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=did-registrar --tail 10000
      - name: Governance Agent Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=governance-agent --tail 10000
      - name: Governance Web Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=governance-web --tail 10000
      - name: Ingress Nginx Logs
        if: always()
        run: kubectl logs -n ingress-system -l app.kubernetes.io/instance=ingress-nginx --tail 10000
      - name: Mediator Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=mediator --tail 10000
      - name: MinIO Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=minio --tail 10000
      - name: Multitenant Agent Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=multitenant-agent --tail 10000
      - name: Multitenant Web Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=multitenant-web --tail 10000
      - name: NATS Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=nats --tail 10000
      - name: PGPool Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=postgres,app.kubernetes.io/component=pgpool --tail 10000
      - name: PostgreSQL Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=postgres,app.kubernetes.io/component=postgresql --tail 10000
      - name: Public Web Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=public-web --tail 10000
      - name: Tails Server Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=tails-server --tail 10000
      - name: Tenant Web Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=tenant-web --tail 10000
      - name: Trust Registry Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=trust-registry --tail 10000
      - name: Waypoint Logs
        if: always()
        run: kubectl logs -n cloudapi -l app.kubernetes.io/instance=waypoint --tail 10000

      - name: Tilt Down Destroy
        if: always()
        run: mise run tilt:down:destroy

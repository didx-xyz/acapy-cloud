name: Continuous Deploy

on:
  workflow_dispatch:
    inputs:
      run-update-deployments:
        description: "Run Update Deployments step manually"
        required: false
        default: true
        type: boolean
      run-tests:
        description: "Run tests step"
        required: false
        default: true
        type: boolean

  push:
    branches:
      - "development"
    tags:
      - "v*"
  pull_request:
    branches:
      - "development"
  pull_request_review:
    types: [submitted]

concurrency:
  group: continuous-deploy
  cancel-in-progress: false

jobs:
  build:
    name: Build images and push to GHCR
    permissions:
      id-token: write # This is required for requesting the JWT
      packages: write # To push to GHCR.io
    runs-on: ubuntu-latest

    outputs:
      image_version: ${{ steps.meta.outputs.version }}

    strategy:
      matrix:
        image:
          [
            ledger-nodes,
            ledger-browser,
            tails-server,
            governance-ga-agent,
            governance-trust-registry,
            governance-multitenant-web,
            governance-webhooks-web,
            governance-multitenant-agent,
            governance-endorser,
            pytest,
          ]
        include:
          - image: governance-ga-agent
            context: .
            file: dockerfiles/agents/Dockerfile.agent
          - image: governance-trust-registry
            context: .
            file: dockerfiles/trustregistry/Dockerfile
          - image: governance-multitenant-web
            context: .
            file: dockerfiles/fastapi/Dockerfile
          - image: governance-webhooks-web
            context: .
            file: dockerfiles/webhooks/Dockerfile
          - image: governance-multitenant-agent
            context: .
            file: dockerfiles/agents/Dockerfile.author.agent
          - image: ledger-browser
            context: https://github.com/bcgov/von-network.git#main
            file: Dockerfile
          - image: ledger-nodes
            context: https://github.com/bcgov/von-network.git#main
            file: Dockerfile
          - image: governance-endorser
            context: .
            file: dockerfiles/endorser/Dockerfile
          - image: tails-server
            context: https://github.com/bcgov/indy-tails-server.git#v1.1.0
            file: docker/Dockerfile.tails-server
          - image: pytest
            context: .
            file: dockerfiles/tests/Dockerfile

    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ github.token }}

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ matrix.image }}
          tags: |
            type=sha,prefix=pr-${{ github.event.pull_request.number }}-,priority=601,enable=${{ github.event_name == 'pull_request' }}
            type=sha,prefix={{branch}}-,priority=601,enable=${{ github.event_name == 'push' && github.ref_type == 'branch' }}
            type=ref,event=branch,priority=600
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.image }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.image }}

  start-runner:
    permissions:
      id-token: write # This is required for requesting the JWT
    name: Start self-hosted EC2 runner
    runs-on: ubuntu-latest
    outputs:
      label: ${{ steps.start-ec2-runner.outputs.label }}
      ec2-instance-id: ${{ steps.start-ec2-runner.outputs.ec2-instance-id }}
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd

      - name: Start EC2 runner
        id: start-ec2-runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: start
          github-token: ${{ secrets.PAT }}
          ec2-image-id: ami-0e77ca258495da48e # ubuntu-jammy-22.04-amd64-server-20230325
          ec2-instance-type: t3.medium
          subnet-id: subnet-05db9c395c90d453d
          security-group-id: sg-0e2beb26798761953 # Tailscale SG
          aws-resource-tags: |
            [
              {"Key": "Name", "Value": "github-runner"},
              {"Key": "GitHubRepository", "Value": "${{ github.repository }}"},
              {"Key": "Project", "Value": "cloudapi-dev"},
              {"Key": "ConfigManagement", "Value": "github"}
            ]
  deploy:
    name: Deploy to EKS
    environment:
      name: dev
    needs:
      - build
    permissions:
      id-token: write # Required to authenticate with AWS
      contents: read # Required to clone this repository
    runs-on: ubuntu-latest
    outputs:
      output: ${{ steps.updated_deployments.outputs.success }}
    env:
      projects: |
        ledger-nodes
        ledger-browser
        governance-ga-agent
        governance-multitenant-agent
        governance-multitenant-web
        governance-trust-registry
        governance-webhooks-web
        governance-endorser
        tails-server
      workaround: |
        ledger-browser
        governance-ga-agent
        governance-multitenant-agent
        governance-multitenant-web
        governance-trust-registry
        governance-webhooks-web
        governance-endorser
        tails-server
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Checkout Charts
        uses: actions/checkout@v4
        with:
          repository: didx-xyz/charts
          token: ${{ secrets.PAT }}
          path: charts

      - name: Install dependencies
        run: sudo apt-get install -y postgresql-client redis-tools

      - name: Sops Binary Installer
        uses: mdgreenwald/mozilla-sops-action@v1.4.1

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd

      - name: Update Kubeconfig
        run: aws eks update-kubeconfig --name cloudapi-dev

      - uses: tailscale/github-action@main
        with:
          authkey: ${{ secrets.TAILSCALE_AUTHKEY }}
          version: 1.48.2

      - name: Helmfile Diff
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        uses: helmfile/helmfile-action@v1.2.0
        with:
          helmfile-args: |
            diff \
              --environment ${{ vars.ENVIRONMENT }} \
              -f ./charts/helmfiles/aries-cloudapi-python.yaml \
              --set image.tag=${{ env.IMAGE_TAG }} \
              --set image.registry=ghcr.io/${{ github.repository_owner }}
          helm-plugins: |
            https://github.com/databus23/helm-diff,
            https://github.com/jkroepke/helm-secrets
          helmfile-version: v0.157.0
          helm-version: v3.12.3
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_version }}

      - name: Helmfile Destroy
        id: destroy_deployments
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        uses: helmfile/helmfile-action@v1.2.0
        with:
          helmfile-args: |
            destroy \
              --environment ${{ vars.ENVIRONMENT }} \
              -f ./charts/helmfiles/aries-cloudapi-python.yaml
          helm-plugins: |
            https://github.com/databus23/helm-diff,
            https://github.com/jkroepke/helm-secrets
          helmfile-version: v0.157.0
          helm-version: v3.12.3
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_version }}

      - name: Wait for pods to terminate
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        run: |
          while true; do
            not_terminated_count=$(kubectl -n dev-cloudapi get pods -o jsonpath='{.items[*].status.containerStatuses[*].ready}' | grep -o 'false' | wc -l)
            if [ "$not_terminated_count" -eq 0 ]; then
              echo "All pods terminated"
              break
            else
              echo "Waiting for pods to terminate"
              sleep 10
            fi
          done

      - name: Drop DBs
        id: drop_dbs
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        env:
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_USER: ${{ secrets.DB_USER}}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_EXCLUDE: ${{ secrets.DB_EXCLUDE }}
          GA_ACAPY_WALLET_NAME: ${{ secrets.GA_ACAPY_WALLET_NAME }}
          MT_ACAPY_WALLET_NAME: ${{ secrets.MT_ACAPY_WALLET_NAME }}
        run: |
          bash ./scripts/aurora-delete.sh -o $GA_ACAPY_WALLET_NAME -d
          bash ./scripts/aurora-delete.sh -o $MT_ACAPY_WALLET_NAME -d

      - name: List Elasticache Redis
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: redis-cli -h $REDIS_HOST -p $REDIS_PORT --scan --pattern '*'

      - name: Clean Elasticache Redis
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        env:
          REDIS_HOST: ${{ secrets.REDIS_HOST }}
          REDIS_PORT: ${{ secrets.REDIS_PORT }}
        run: redis-cli -h $REDIS_HOST -p $REDIS_PORT FLUSHALL

      - name: Re-create Trust Registry DB
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        env:
          REDIS_HOST: ${{ secrets.TRUST_REGISTRY_DB_OWNER }}
        run: |
          bash ./scripts/aurora-delete.sh -o TRUST_REGISTRY_DB_OWNER -d
          bash ./scripts/aurora-create.sh -o TRUST_REGISTRY_DB_OWNER -c

      - name: Helmfile Apply
        id: update_deployments
        if: github.event.review.state == 'approved' || github.event_name == 'push' || github.event.inputs.run-update-deployments
        uses: helmfile/helmfile-action@v1.2.0
        with:
          helmfile-args: |
            apply \
              --environment ${{ vars.ENVIRONMENT }} \
              -f ./charts/helmfiles/aries-cloudapi-python.yaml \
              --set image.tag=${{ env.IMAGE_TAG }} \
              --set image.registry=ghcr.io/${{ github.repository_owner }}
          helm-plugins: |
            https://github.com/databus23/helm-diff,
            https://github.com/jkroepke/helm-secrets
          helmfile-version: v0.157.0
          helm-version: v3.12.3
        env:
          IMAGE_TAG: ${{ needs.build.outputs.image_version }}

      - name: Output
        id: updated_deployments
        if: steps.update_deployments.outcome == 'success'
        run: echo "success=true" >> "$GITHUB_OUTPUT"

  test:
    # if: (needs.deploy.outputs.output == 'true' && github.event.inputs.run-tests != 'false') || github.event.inputs.run-tests
    # Only run external testing manually for now due to idiosyncrasies between local and external testing.
    if: github.event.inputs.run-tests == 'true'
    needs:
      - start-runner
      - deploy
    runs-on: ${{ needs.start-runner.outputs.label }}
    name: Test with pytest
    permissions:
      id-token: write # This is required for requesting the JWT
    env:
      KUBECONFIG: /root/.kube/config
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install test dependencies
        run: |
          apt-get update && apt-get upgrade -y
          apt-get install -y python-is-python3 build-essential python3-dev
          python --version
          curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
          python get-pip.py
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd

      - name: Test with pytest
        id: test
        run: |
          pytest --cov=app --cov=endorser --cov=trustregistry --cov=webhooks app endorser trustregistry webhooks
          bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
          echo done
        env:
          CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }} # Needed for Codacy reporting
          # ./app/constants.py
          ACAPY_GOVERNANCE_AGENT_URL: ${{ secrets.ACAPY_GOVERNANCE_AGENT_URL }}
          ACAPY_TENANT_AGENT_URL: ${{ secrets.ACAPY_TENANT_AGENT_URL }}
          ACAPY_GOVERNANCE_AGENT_API_KEY: ${{ secrets.ACAPY_GOVERNANCE_AGENT_API_KEY }}
          ACAPY_TENANT_AGENT_API_KEY: ${{ secrets.ACAPY_TENANT_AGENT_API_KEY }}
          TRUST_REGISTRY_URL: ${{ secrets.TRUST_REGISTRY_URL }}
          WEBHOOKS_URL: ${{ secrets.WEBHOOKS_URL }}
          ACAPY_MULTITENANT_JWT_SECRET: ${{ secrets.ACAPY_MULTITENANT_JWT_SECRET }}
          ACAPY_TAILS_SERVER_BASE_URL: ${{ secrets.ACAPY_TAILS_SERVER_BASE_URL }}
          CLOUDAPI_URL: ${{ secrets.CLOUDAPI_URL }}

          # ./app/tests/util/constants.py
          GOVERNANCE_FASTAPI_ENDPOINT: ${{ secrets.GOVERNANCE_FASTAPI_ENDPOINT }}
          GOVERNANCE_ACAPY_API_KEY: ${{ secrets.GOVERNANCE_ACAPY_API_KEY }}
          TENANT_FASTAPI_ENDPOINT: ${{ secrets.TENANT_FASTAPI_ENDPOINT }}
          TENANT_ACAPY_API_KEY: ${{ secrets.TENANT_ACAPY_API_KEY }}
          LEDGER_REGISTRATION_URL: ${{ secrets.LEDGER_REGISTRATION_URL }}
          #WEBHOOKS_URL: ${{ secrets.WEBHOOKS_URL }} # defined in both ./app/constants.py and ./app/tests/util/constants.py

  stop-runner:
    permissions:
      id-token: write # This is required for requesting the JWT
    name: Stop self-hosted EC2 runner
    needs:
      - start-runner # required to get output from the start-runner job
      - test
      - deploy
    runs-on: ubuntu-latest
    if: ${{ always() }} # required to stop the runner even if the error happened in the previous jobs
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd
      - name: Stop EC2 runner
        uses: machulav/ec2-github-runner@v2
        with:
          mode: stop
          github-token: ${{ secrets.PAT }}
          label: ${{ needs.start-runner.outputs.label }}
          ec2-instance-id: ${{ needs.start-runner.outputs.ec2-instance-id }}

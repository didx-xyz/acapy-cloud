# This workflow will install Python dependencies, run tests and lint with a single version of Python
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: Continuous Build

on:
  push:
    branches: [development, main]
  pull_request:
    branches:
      - development
  workflow_dispatch:

jobs:
  build:
    name: Build image and push to ECR
    permissions:
      id-token: write # This is required for requesting the JWT
    runs-on: ubuntu-latest

    outputs:
      image_version: ${{ steps.meta.outputs.version }}

    strategy:
      matrix:
        image:
          [
            ledger-nodes,
            ledger-browser,
            tails-server,
            governance-ga-agent,
            governance-trust-registry,
            governance-multitenant-web,
            governance-webhooks-web,
            governance-multitenant-agent,
            governance-endorser,
          ]
        include:
          - image: governance-ga-agent
            context: .
            file: dockerfiles/agents/Dockerfile.agent
          - image: governance-trust-registry
            context: .
            file: dockerfiles/trustregistry/Dockerfile
          - image: governance-multitenant-web
            context: .
            file: dockerfiles/fastapi/Dockerfile
          - image: governance-webhooks-web
            context: .
            file: dockerfiles/webhooks/Dockerfile
          - image: governance-multitenant-agent
            context: .
            file: dockerfiles/agents/Dockerfile.author.agent
          - image: ledger-browser
            context: https://github.com/didx-xyz/von-network.git
            file: Dockerfile
          - image: ledger-nodes
            context: https://github.com/didx-xyz/von-network.git
            file: Dockerfile
          - image: governance-endorser
            context: .
            file: dockerfiles/endorser/Dockerfile
          - image: tails-server
            context: https://github.com/bcgov/indy-tails-server.git#v1.0.0
            file: docker/Dockerfile.tails-server
    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "324190738845" # org registry

      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/${{ matrix.image }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push Docker images
        uses: docker/build-push-action@v4
        with:
          context: ${{ matrix.context }}
          file: ${{ matrix.file }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha,scope=build-${{ matrix.image }}
          cache-to: type=gha,mode=max,scope=build-${{ matrix.image }}
  test:
    needs: [build]
    permissions:
      id-token: write # This is required for requesting the JWT
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-region: af-south-1
          role-to-assume: arn:aws:iam::402177810328:role/cicd
          role-session-name: github-cicd
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registries: "324190738845" # org registry
      - name: Docker Metadata
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ steps.login-ecr.outputs.registry }}/governance-ga-agent
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
      - name: Set up Python 3.9
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"
      - name: Cache pip packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('app/requirements.txt', 'requirements.dev.txt', 'trustregistry/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: Install test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r app/requirements.txt -r requirements.dev.txt -r trustregistry/requirements.txt
      - name: Install Compose
        uses: ndeloof/install-compose-action@v0.0.1
        with:
          # version: v2.1.0 # defaults to 'latest'
          legacy: true    # will also install in PATH as `docker-compose`
      - name: Expose GitHub Runtime
        uses: crazy-max/ghaction-github-runtime@v2
      - name: buildx
        run: |
          docker buildx create --use --driver=docker-container
          docker buildx bake --set *.cache-to="type=gha,mode=max" --set *.cache-from="type=gha" --load
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.meta.outputs.version }}
      - name: Start Test Harness
        run: |
          ./manage up-as-daemon
        shell: bash
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ steps.meta.outputs.version }}
      # - name: Test with pytest
      #   id: test
      #   continue-on-error: true
      #   run: |
      #     pytest --durations=0 --cov=trustregistry --cov=app trustregistry app
      #     bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
      #     echo done
      #   env:
      #     CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }} # Needed for Codacy reporting
      # - name: Retry tests
      #   if: steps.test.outcome=='failure' # check the step outcome, retry 1st time
      #   run: |
      #     sudo chown -R $(id -u):$(id -g) ./data
      #     sudo chmod 777 ./data -R
      #     docker-compose up --build -d governance-ga-agent
      #     docker-compose up --build -d governance-multitenant-agent
      #     pytest trustregistry app --cov=trustregistry --cov=app --ignore=webhooks --log-cli-level=1
      #     bash <(curl -Ls https://coverage.codacy.com/get.sh) report -r coverage.xml
      #     echo done
      #   env:
      #     CODACY_PROJECT_TOKEN: ${{ secrets.CODACY_PROJECT_TOKEN }} # Needed for Codacy reporting
      # - name: Run Pylint
      #   run: |
      #     pylint app --rcfile=.pylintrc -r n --msg-template="{path}:{line}: [{msg_id}({symbol}), {obj}] {msg}" --exit-zero > pylintreport.txt
      # - name: Tear down test harness
      #   run: |
      #     ./manage down || true
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: multiple command
        if: github.ref == 'refs/heads/development' && github.repository == 'didx-xyz/aries-cloudapi-python' && github.event_name == 'push'
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOSTNAME }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd aries-cloudapi-python
            git add .
            git stash
            git checkout development
            git pull
            ./manage down
            ./manage up-as-daemon

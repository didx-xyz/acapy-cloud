fullnameOverride: trust-registry

replicaCount: 1

podAnnotations:
  sidecar.istio.io/proxyCPU: 10m
  ad.datadoghq.com/trust-registry.logs: '[{"source": "python.uvicorn", "service": "trust-registry"}]'
podLabels:
  admission.datadoghq.com/enabled: "true"

image:
  name: acapy-cloud/trust-registry
  pullPolicy: Always
  tag: master

command:
  - poetry
  - run
  - uvicorn
  - trustregistry.main:app
  - --log-config=/tmp/log_conf.yaml
  - --reload
  - --host
  - 0.0.0.0
  - --port
  - 8000

lifecycle:
  preStop:
    exec:
      command:
        - /bin/sh
        - -c
        - sleep 5

ingressDomain: acapy-cloud.dev.didxtech.com
ingress:
  internal:
    enabled: true
    className: nginx-internal
    rules:
      - host: trust-registry-{{ .Values.ingressDomain }}
        paths:
          - path: /
            port: 8000

service:
  appProtocol: tcp
  hostNetwork: false
  port: 8000
  containerPort: 8000

livenessProbe:
  httpGet:
    path: /docs
    port: "{{ trunc 15 .Release.Name }}"
readinessProbe:
  httpGet:
    path: /docs
    port: "{{ trunc 15 .Release.Name }}"

# resources:
#   requests:
#     cpu: 50m
#     memory: 256Mi
#   limits:
#     cpu: 250m
#     memory: 256Mi

autoscaling:
  enabled: false

secretData:
  POSTGRES_DATABASE_URL: postgresql://trust-registry:trust-registry@cloudapi-postgresql:5432/trust-registry?sslmode=prefer

env:
  LOG_LEVEL: warning
  PYTHONPATH: /
  OPENAPI_NAME: Trustregistry
  POSTGRES_POOL_SIZE: 10
  POSTGRES_MAX_OVERFLOW: 20
  POSTGRES_POOL_RECYCLE: 600 # 10 minutes
  POSTGRES_POOL_TIMEOUT: 30
  ENABLE_SERIALIZE_LOGS: "TRUE"

podSecurityContext:
  fsGroup: 65534
securityContext:
  runAsUser: 0

extraVolumes:
  - name: logs
    emptyDir: {}
extraVolumeMounts:
  - name: logs
    mountPath: /logs

podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: soft
  key: node.kubernetes.io/lifecycle
  values:
    - spot

configFiles:
  log_conf.yaml:
    path: /tmp/log_conf.yaml
    content: |-
      version: 1
      disable_existing_loggers: False
      formatters:
        default:
          "()": uvicorn.logging.DefaultFormatter
          format: '%(asctime)s %(name)s %(levelname)s %(message)s'
          use_colors: null
        access:
          "()": uvicorn.logging.AccessFormatter
          format: '%(asctime)s %(name)s %(levelname)s %(client_addr)s - "%(request_line)s" %(status_code)s'
      handlers:
        default:
          formatter: default
          class: logging.StreamHandler
          stream: ext://sys.stderr
        access:
          formatter: access
          class: logging.StreamHandler
          stream: ext://sys.stdout
      loggers:
        uvicorn:
          level: INFO
          handlers:
            - default
          propagate: no
        uvicorn.error:
          level: INFO
        uvicorn.access:
          level: INFO
          handlers:
            - access
          propagate: no

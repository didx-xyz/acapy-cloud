fullnameOverride: governance-agent

replicaCount: 2

podAnnotations:
  sidecar.istio.io/proxyCPU: 10m
  ad.datadoghq.com/governance-agent.logs: '[{"source": "python", "service": "governance-agent", "auto_multi_line_detection": true}]'

image:
  name: acapy-cloud/agent
  pullPolicy: Always
  tag: master

podLabels:
  admission.datadoghq.com/enabled: "false"

command:
  - aca-py
  - start
  - --inbound-transport
  - http
  - 0.0.0.0
  - 3020
  - --admin
  - 0.0.0.0
  - 3021
  - --plugin
  - nats_events.v1_0.nats_queue.events
  - --plugin-config-value
  - nats_queue.connection.connection_url="$(NATS_SERVER)"
  - --plugin
  - cheqd
  - --plugin-config-value
  - resolver_url="http://did-resolver:8080/1.0/identifiers/"
  - --plugin-config-value
  - registrar_url="http://did-registrar:9080/1.0/"

lifecycle:
  preStop:
    exec:
      command:
        - /bin/sh
        - -c
        - sleep 10

ingressDomain: cloudapi.127.0.0.1.nip.io
ingress:
  internal:
    enabled: true
    className: nginx
    rules:
      - host: governance-agent-didcomm.{{ .Values.ingressDomain}}
        paths:
          - path: /
            port: 3020 # didcomm
  internal-e2e:
    enabled: true
    className: nginx
    rules:
      - host: governance-agent.{{ .Values.ingressDomain}}
        paths:
          - path: /
            port: 3021 # http

service:
  # if set, will run Pods on Node Network
  hostNetwork: false
  port: 3021 # http
  containerPort: 3021 # http
  appProtocol: tcp

addPorts:
  - port: 3020 # didcomm
    containerPort: 3020 # didcomm
    protocol: TCP

livenessProbe:
  httpGet:
    path: /status/live
    port: "{{ trunc 15 .Release.Name }}"
readinessProbe:
  httpGet:
    path: /status/ready
    port: "{{ trunc 15 .Release.Name }}"
startupProbe:
  httpGet:
    path: /status/live
    port: "{{ trunc 15 .Release.Name }}"

# resources:
#   requests:
#     cpu: 100m
#     memory: 256Mi
#   limits:
#     cpu: 500m
#     memory: 512Mi

initContainers:
  - name: nats-check
    image: bitnami/natscli
    command:
      - sh
      - -c
      - |
        until nats --server $NATS_SERVER str info $NATS_STREAM >/dev/null 2>&1; do echo waiting for nats stream >/dev/null 2>&1; sleep 2; done;
    env:
      - name: NATS_SERVER
        value: "{{ .Values.env.NATS_SERVER }}"
      - name: NATS_STREAM
        value: "{{ .Values.env.NATS_STREAM }}"
  - name: nc-postgres
    image: busybox
    command: ['sh', '-c', 'until nc -z $(PG_HOST) $(PG_PORT); do echo waiting for postgres; sleep 2; done;']
    env:
      - name: PG_HOST
        valueFrom:
          secretKeyRef:
            name: '{{ include "acapy-cloud.fullname" . }}-env'
            key: WALLET_DB_HOST
      - name: PG_PORT
        valueFrom:
          secretKeyRef:
            name: '{{ include "acapy-cloud.fullname" . }}-env'
            key: WALLET_DB_PORT

podSecurityContext:
  fsGroup: 1001
securityContext:
  readOnlyRootFilesystem: false
  runAsUser: 1001

persistence:
  enabled: false

extraVolumes:
  - name: indy-tails
    emptyDir: {}
  - name: acapy-agent
    emptyDir: {}
  - name: cache
    emptyDir: {}
  - name: ledger
    emptyDir: {}
  - name: log
    emptyDir: {}
  - name: tmp
    emptyDir: {}
extraVolumeMounts:
  - name: indy-tails
    mountPath: /home/aries/.indy_client/tails
  - name: acapy-agent
    mountPath: /home/aries/.acapy_agent
  - name: cache
    mountPath: /home/aries/.cache
  - name: ledger
    mountPath: /home/aries/ledger
  - name: log
    mountPath: /home/aries/log
  - name: tmp
    mountPath: /tmp

autoscaling:
  enabled: false

# Sensitive environment variables are sourced from k8s secrets:
# - generated with secretData, or
# - pre-populated with external tooling
# TODO: Helm secret logic to create new secret if not exist
secretData:
  ACAPY_ADMIN_API_KEY: adminApiKey
  ACAPY_LABEL: Governance
  ACAPY_TENANT_AGENT_API_KEY: adminApiKey
  ACAPY_WALLET_KEY: verySecretGovernanceWalletKey
  ACAPY_WALLET_NAME: governance
  # ACAPY_WALLET_SEED: verySecretPaddedWalletSeedPadded

  ACAPY_WALLET_STORAGE_CONFIG: '{ "max_connections":10, "min_idle_count":10, "url":"cloudapi-postgresql:5432" }'
  ACAPY_WALLET_STORAGE_CREDS: '{ "account": "governance", "admin_account": "governance", "admin_password": "governance", "password": "governance" }'
  WALLET_DB_ADMIN_PASS: governance
  WALLET_DB_ADMIN_USER: governance
  WALLET_DB_HOST: cloudapi-postgresql
  WALLET_DB_PASS: governance
  WALLET_DB_PORT: 5432
  WALLET_DB_USER: governance

env:
  ACAPY_LOG_LEVEL: info
  # NATS related
  NATS_CREDS_FILE: "" # NATS in Local dev has no auth
  NATS_SERVER: nats://nats:4222
  NATS_SUBJECT: cloudapi.aries.events
  NATS_STREAM: cloudapi_aries_events
  # for aca-py
  ADMIN_URL: http://governance-agent:3021
  ACAPY_OUTBOUND_TRANSPORT: http
  ACAPY_ENDPOINT: http://governance-agent:3020
  # Tails server
  # Should be changed further
  ACAPY_TAILS_SERVER_BASE_URL: http://tails-server:6543
  ACAPY_WALLET_TYPE: askar-anoncreds
  ACAPY_WALLET_STORAGE_TYPE: postgres_storage
  ACAPY_AUTO_PROVISION: true
  # Ledger
  # ACAPY_GENESIS_URL: http://ledger-browser:8000/genesis
  ACAPY_NO_LEDGER: true

  ACAPY_PUBLIC_INVITES: true
  ACAPY_ENDORSER_ROLE: endorser
  # ## DO NOT CHANGE VARIABLES BELOW
  # ## Unless you know exactly what you are doing
  # ## Changes will probably break CloudAPI
  # Optional Helper Configurations - See https://github.com/openwallet-foundation/acapy/blob/main/acapy_agent/config/argparse.py
  ACAPY_AUTO_ACCEPT_INVITES: false
  ACAPY_AUTO_ACCEPT_REQUESTS: false
  ACAPY_AUTO_PING_CONNECTION: true
  ACAPY_AUTO_RESPOND_MESSAGES: false
  ACAPY_AUTO_RESPOND_CREDENTIAL_PROPOSAL: false
  ACAPY_AUTO_RESPOND_CREDENTIAL_OFFER: false
  ACAPY_AUTO_RESPOND_CREDENTIAL_REQUEST: false
  ACAPY_AUTO_RESPOND_PRESENTATION_PROPOSAL: false
  ACAPY_AUTO_RESPOND_PRESENTATION_REQUEST: false
  ACAPY_AUTO_STORE_CREDENTIAL: true
  ACAPY_AUTO_VERIFY_PRESENTATION: true
  ACAPY_PRESERVE_EXCHANGE_RECORDS: false
  ACAPY_AUTO_ENDORSE_TRANSACTIONS: false

  ACAPY_ACCEPT_TAA: "[service_agreement,1.1]"

  ACAPY_REQUESTS_THROUGH_PUBLIC_DID: true
  ACAPY_EMIT_NEW_DIDCOMM_PREFIX: true
  ACAPY_EMIT_NEW_DIDCOMM_MIME_TYPE: true

  # ACAPY_LOG_CONFIG: /home/aries/logging_config.yaml

podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: soft
  key: node.kubernetes.io/lifecycle
  values:
    - spot

configFiles:
  logging_config.yml:
    path: /home/aries/logging_config.yaml
    content: |-
      version: 1
      disable_existing_loggers: False
      formatters:
        json_formatter:
          (): pythonjsonlogger.jsonlogger.JsonFormatter
          format: '%(asctime)s %(name)s %(levelname)s %(pathname)s:%(lineno)d %(message)s'
      handlers:
        stream_handler:
          class: logging.StreamHandler
          level: DEBUG
          formatter: json_formatter
          stream: ext://sys.stderr
        timed_file_handler:
          class: logging.handlers.TimedRotatingFileHandler
          level: DEBUG
          formatter: json_formatter
          filename: '/home/aries/log/acapy-agent.log'
          when: 'd'
          interval: 7
          backupCount: 1
      loggers:
        '':
          level: ERROR
          handlers:
            - stream_handler
            - timed_file_handler

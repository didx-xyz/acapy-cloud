fullnameOverride: governance-web

replicaCount: 2

podAnnotations:
  sidecar.istio.io/proxyCPU: 10m
  ad.datadoghq.com/governance-web.logs: '[{"source": "python.uvicorn", "service": "governance-web"}]'

image:
  name: acapy-cloud/app
  pullPolicy: Always
  tag: master

command:
  - poetry
  - run
  - uvicorn
  - app.main:app
  - --log-config=/tmp/log_conf.yaml
  - --reload
  - --host
  - 0.0.0.0
  - --port
  - 8000

ingressDomain: cloudapi.127.0.0.1.nip.io
ingress:
  internal:
    enabled: true
    className: nginx
    rules:
      - host: governance-web.{{ .Values.ingressDomain }}
        paths:
          - path: /governance
  cloudapi-internal:
    enabled: true
    className: nginx
    annotations:
      # Retool needs the below
      nginx.ingress.kubernetes.io/cors-allow-headers: x-api-key
      nginx.ingress.kubernetes.io/enable-cors: "true"
    rules:
      - host: '{{ .Values.ingressDomain }}'
        paths:
          - path: /governance

service:
  # if set, will run Pods on Node Network
  hostNetwork: false
  port: 8000
  containerPort: 8000
  appProtocol: http

livenessProbe:
  httpGet:
    path: /docs
    port: "{{ trunc 15 .Release.Name }}"
readinessProbe:
  httpGet:
    path: /docs
    port: "{{ trunc 15 .Release.Name }}"

# resources:
#   requests:
#     cpu: 50m
#     memory: 256Mi
#   limits:
#     cpu: 250m
#     memory: 256Mi

initContainers:
  - name: wait-governance-agent
    image: curlimages/curl
    command:
      - sh
      - -c
      - |
        until curl -s {{ .Values.env.ACAPY_GOVERNANCE_AGENT_URL }} -o /dev/null; do
          echo "waiting for governance-agent to be healthy"
          sleep 2
        done

persistence:
  enabled: false

autoscaling:
  enabled: false

podLabels:
  admission.datadoghq.com/enabled: "true"
  sidecar.istio.io/inject: "true"

secretData:
  ACAPY_GOVERNANCE_AGENT_API_KEY: adminApiKey

env:
  LOG_LEVEL: info
  ACAPY_GOVERNANCE_AGENT_URL: http://governance-agent:3021
  ACAPY_TENANT_AGENT_URL: http://multitenant-agent:3021
  TRUST_REGISTRY_URL: http://trust-registry:8000
  OPENAPI_NAME: CloudAPI Governance
  PYTHONPATH: /
  ROLE: governance
  ROOT_PATH: /governance
  ENABLE_SERIALIZE_LOGS: "FALSE"

podSecurityContext:
  fsGroup: 65534
securityContext:
  # Required for Tilt Live Reload
  readOnlyRootFilesystem: false
  runAsNonRoot: false
  runAsUser: 0

extraVolumes:
  - name: logs
    emptyDir: {}
  - name: tmp
    emptyDir: {}
extraVolumeMounts:
  - name: logs
    mountPath: /logs
  - name: tmp
    mountPath: /tmp

lifecycle:
  preStop:
    exec:
      command:
        - /bin/sh
        - -c
        - sleep 15

podAntiAffinityPreset: soft
nodeAffinityPreset:
  type: soft
  key: node.kubernetes.io/lifecycle
  values:
    - spot

configFiles:
  log_conf.yaml:
    path: /tmp/log_conf.yaml
    content: |-
      version: 1
      disable_existing_loggers: False
      formatters:
        default:
          "()": uvicorn.logging.DefaultFormatter
          format: '%(asctime)s %(name)s %(levelname)s %(message)s'
          use_colors: null
        access:
          "()": uvicorn.logging.AccessFormatter
          format: '%(asctime)s %(name)s %(levelname)s %(client_addr)s - "%(request_line)s" %(status_code)s'
      handlers:
        default:
          formatter: default
          class: logging.StreamHandler
          stream: ext://sys.stderr
        access:
          formatter: access
          class: logging.StreamHandler
          stream: ext://sys.stdout
      loggers:
        uvicorn:
          level: INFO
          handlers:
            - default
          propagate: no
        uvicorn.error:
          level: INFO
        uvicorn.access:
          level: INFO
          handlers:
            - access
          propagate: no

istio:
  auth:
    authn: # Configures cloudapi Keycloak realm as JWT issuer for governance
      enabled: false
      conf:
        jwtRules:
          - issuer: http://cloudapi.127.0.0.1.nip.io/auth/realms/cloudapi
    authz: # Authorisation config
      enabled: false
      conf:
        rules:
          - to:
            - operation:
                methods: ["GET"]
                paths:
                  - /governance/docs
                  - /governance/docs/*
                  - /governance/openapi.json
          - when:
              - key: request.auth.claims[iss]
                values:
                  - http://cloudapi.127.0.0.1.nip.io/auth/realms/cloudapi
              - key: request.auth.claims[client_id]
                values:
                  - governance
            to:
              - operation:
                  methods: ["*"]
                  paths:
                    - /governance
                    - /governance/*
          - when: # exclude internal admin url from Istio authN, i.e., can use it unauthenticated internally
            - key: request.headers[host]
              values:
                - governance-web.cloudapi.127.0.0.1.nip.io
            to:
              - operation:
                  methods: ["*"]
                  paths:
                    - /governance
                    - /governance/*

jobs:
  # Post Install/Upgrade hook to bootstrap Governance DID
  bootstrap-governance-did:
    enabled: true
    labels: {}
    podLabels: {}
    annotations:
      helm.sh/hook: post-install,post-upgrade
      helm.sh/hook-delete-policy: before-hook-creation
    podAnnotations:
      ad.datadoghq.com/exclude: "true"
      sidecar.istio.io/inject: "false"
    image: curlimages/curl
    command:
      - /bin/sh
      - -c
      - |
        set -uo pipefail

        BASE_URL=http://{{ include "acapy-cloud.fullname" . }}:{{ .Values.service.port }}

        # List all Governance DIDs
        DIDS=$(curl ${BASE_URL}/governance/v1/wallet/dids \
          -fsX GET \
          -H "X-API-Key: governance.${API_KEY}")

        # If listing dids fails, exit with error
        if [ $? -ne 0 ]; then
          echo "Failed listing Governance DIDs. Exiting."
          exit 1
        fi

        # Check if the list of DIDs is not empty
        if [ "${DIDS}" != "[]" ]; then
          echo "Governance DID already exists: ${DIDS}"
          exit 0
        fi

        echo "No DIDs found, proceeding with bootstrap."
        RESULT=$(curl ${BASE_URL}/governance/v1/wallet/dids \
          -fsX POST \
          -H "Content-Type: application/json" \
          -H "X-API-Key: governance.${API_KEY}" \
          -d '{"method": "cheqd", "seed": "'${WALLET_SEED}'"}')

        if [ $? -ne 0 ]; then
          echo "Failed to create Governance DID. Exiting."
          exit 1
        fi

        echo "DID created: ${RESULT}"
    env:
      WALLET_SEED:
        valueFrom:
          secretKeyRef:
            name: governance-agent-env
            key: WALLET_SEED
      API_KEY:
        valueFrom:
          secretKeyRef:
            name: '{{ include "acapy-cloud.fullname" . }}-env'
            key: ACAPY_GOVERNANCE_AGENT_API_KEY
    podSecurityContext: {}
      # fsGroup: 65534
    securityContext:
      capabilities:
        drop:
        - ALL
      readOnlyRootFilesystem: true
      runAsNonRoot: true
      runAsUser: 65534

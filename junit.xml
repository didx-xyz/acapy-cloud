<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="1" time="45.090" timestamp="2021-07-23T13:05:24.835291" hostname="vineeth-G3-3579"><testcase classname="tests.test_issuer_v2" name="test_all" time="44.641"><failure message="AssertionError: assert {'detail': [{'loc': ['query', 'credential_x_id'], 'msg': 'field required', 'type': 'value_error.missing'}]} == ''">async_client = &lt;httpx.AsyncClient object at 0x7fdb8ec440d0&gt;, async_client_alice = &lt;httpx.AsyncClient object at 0x7fdb8ec44c10&gt;
async_client_bob = &lt;httpx.AsyncClient object at 0x7fdb8ecb12e0&gt;, test_bob_and_alice_connect = ('7380a596-1808-4641-949f-be83c98294f7', 'cbc2f657-f178-4b31-93c1-8719a0e7a729')
test_create_credential_def = CredentialDefinition(support_revocation=False, tag='GMKJM', schema_id='5aU75Rz8mYUAjXszX3soGx:2:test_schema:0.3')
yoma_agent_mock = AriesAgentController(admin_url='http://localhost:3021', api_key='adminApiKey', is_multitenant=False)

    @pytest.mark.asyncio
    async def test_all(
        async_client,
        async_client_alice,
        async_client_bob,
        test_bob_and_alice_connect,
        test_create_credential_def,
        yoma_agent_mock,
    ):
        async def test_send_credential(
            async_client_alice=async_client_alice,
        ):
            cred_alice = Credential(
                connection_id=ALICE_CONNECTION_ID,
                schema_id=SCHEMA_DEFINITION_RESULT["schema_id"],
                cred_def_id=CRED_DEF_ID,
                attributes=["average"],
            ).json()
            cred_send_res = (
                await async_client_alice.post(ISSUER_PATH + "/credential", data=cred_alice)
            ).json()
            global CRED_X_ID
            assert cred_send_res == ""

            CRED_X_ID = cred_send_res["credential"]["credential_exchange_id"]

            assert cred_send_res["credential"]
            assert cred_send_res["credential"]["connection_id"] == ALICE_CONNECTION_ID
            assert (
                cred_send_res["credential"]["schema_id"]
                == SCHEMA_DEFINITION_RESULT["schema_id"]
            )

        async def test_offer_credential(
            async_client_alice=async_client_alice,
        ):
            cred_alice = CredentialOffer(
                connection_id=ALICE_CONNECTION_ID,
                cred_def_id=CRED_DEF_ID,
                attributes=["speed"],
            ).json()
            cred_offer_res = (
                await async_client_alice.post(
                    ISSUER_PATH + "/credential/offer", data=cred_alice
                )
            ).json()
            assert cred_offer_res == ""
            global CRED_X_ID
            records_a = (await async_client_alice.get(BASE_PATH + "/records")).json()

            print(
                "x-records alice x id: ", records_a["results"][0]["credential_exchange_id"]
            )
            CRED_X_ID = records_a["results"][0]["credential_exchange_id"]
            time.sleep(10)
            assert cred_offer_res["auto_issue"]
            assert cred_offer_res["connection_id"] == ALICE_CONNECTION_ID
            assert cred_offer_res["schema_id"] == SCHEMA_DEFINITION_RESULT["schema_id"]

        async def test_get_records(async_client_alice=async_client_alice):
            async_client_alice.headers.update({"connection-id": ALICE_CONNECTION_ID})
            records = (
                await async_client_alice.get(
                    ISSUER_PATH + "/records",
                )
            ).json()
            assert records["results"]
            # assert len(records["results"]) &gt;= 1

        async def test_send_credential_proposal(async_client_alice=async_client_alice):
            cred_alice = Proposal(
                connection_id=ALICE_CONNECTION_ID,
                schema_id=SCHEMA_DEFINITION_RESULT["schema_id"],
                cred_def_id=CRED_DEF_ID,
                attributes=["bruh"],
            ).json()
            prop_send_response = (
                await async_client_alice.post(ISSUER_PATH + "/credential/proposal")
            ).json()
            assert prop_send_response == ""
            assert prop_send_response["auto_issue"] == False
            assert prop_send_response["auto_remove"]
            assert prop_send_response["connection"] == ALICE_CONNECTION_ID

        async def test_credential_request(async_client_alice=async_client_alice):
            headers = async_client_alice.headers.update({"credential-x-id": CRED_X_ID})
            cred_send_response = (
                await async_client_alice.post(
                    ISSUER_PATH + "/credential/request", headers=headers
                )
            ).json()
            assert cred_send_response == ""
            assert cred_send_response["error_message"]
            assert "Credential exchange" in cred_send_response["error_message"]

        # await  test_get_records()
        # await test_send_credential()
        # await test_offer_credential()
        # await test_send_credential_proposal()
&gt;       await test_credential_request()

app/tests/test_issuer_v2.py:215:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

async_client_alice = &lt;httpx.AsyncClient object at 0x7fdb8ec44c10&gt;

    async def test_credential_request(async_client_alice=async_client_alice):
        headers = async_client_alice.headers.update({"credential-x-id": CRED_X_ID})
        cred_send_response = (
            await async_client_alice.post(
                ISSUER_PATH + "/credential/request", headers=headers
            )
        ).json()
&gt;       assert cred_send_response == ""
E       AssertionError: assert {'detail': [{'loc': ['query', 'credential_x_id'], 'msg': 'field required', 'type': 'value_error.missing'}]} == ''

app/tests/test_issuer_v2.py:207: AssertionError</failure></testcase></testsuite></testsuites>
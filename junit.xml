<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="4" failures="9" skipped="0" tests="67" time="134.578" timestamp="2021-10-12T15:33:57.824808" hostname="localhost"><testcase classname="trustregistry.tests.test_actor" name="test_get_actors" time="0.064" /><testcase classname="trustregistry.tests.test_actor" name="test_register_actor" time="0.053" /><testcase classname="trustregistry.tests.test_actor" name="test_update_actor" time="0.077" /><testcase classname="trustregistry.tests.test_actor" name="test_remove_schema" time="0.084" /><testcase classname="trustregistry.tests.test_crud" name="test_get_actors" time="0.012" /><testcase classname="trustregistry.tests.test_crud" name="test_create_actor" time="0.007" /><testcase classname="trustregistry.tests.test_crud" name="test_update_actor" time="0.016" /><testcase classname="trustregistry.tests.test_crud" name="test_delete_actor" time="0.008" /><testcase classname="trustregistry.tests.test_crud" name="test_get_schemas" time="0.004" /><testcase classname="trustregistry.tests.test_crud" name="test_create_schema" time="0.016" /><testcase classname="trustregistry.tests.test_crud" name="test_update_schema" time="0.011" /><testcase classname="trustregistry.tests.test_crud" name="test_delete_schema" time="0.011" /><testcase classname="trustregistry.tests.test_main" name="test_root" time="0.017" /><testcase classname="trustregistry.tests.test_main" name="test_registry" time="0.014" /><testcase classname="trustregistry.tests.test_models" name="test_actor" time="0.004" /><testcase classname="trustregistry.tests.test_models" name="test_schema" time="0.002" /><testcase classname="trustregistry.tests.test_schema" name="test_get_schemas" time="0.028" /><testcase classname="trustregistry.tests.test_schema" name="test_register_schema" time="0.087" /><testcase classname="trustregistry.tests.test_schema" name="test_update_schema" time="0.115" /><testcase classname="trustregistry.tests.test_schema" name="test_remove_schema" time="0.054" /><testcase classname="trustregistry.tests.test_schemas" name="test_actor" time="0.001" /><testcase classname="trustregistry.tests.test_schemas" name="test_schema" time="0.001" /><testcase classname="app.tests.test_acapy_ledger_facade" name="test_error_on_get_taa" time="0.010" /><testcase classname="app.tests.test_acapy_ledger_facade" name="test_error_on_accept_taa" time="0.007" /><testcase classname="app.tests.test_acapy_ledger_facade" name="test_error_on_get_did_endpoint" time="0.003" /><testcase classname="app.tests.test_acapy_wallet_facade" name="test_error_on_get_pub_did" time="0.022" /><testcase classname="app.tests.test_acapy_wallet_facade" name="test_error_on_assign_pub_did" time="0.015" /><testcase classname="app.tests.test_acapy_wallet_facade" name="test_error_on_create_pub_did" time="0.008" /><testcase classname="app.tests.test_connections" name="test_create_invite" time="6.151" /><testcase classname="app.tests.test_connections" name="test_accept_invite" time="5.826" /><testcase classname="app.tests.test_connections" name="test_get_connections" time="5.644" /><testcase classname="app.tests.test_connections" name="test_get_connection_by_id" time="5.545" /><testcase classname="app.tests.test_connections" name="test_delete_connection" time="5.580" /><testcase classname="app.tests.test_connections" name="test_bob_and_alice_connect" time="4.816"><error message="failed on setup with &quot;KeyError: 'did_object'&quot;">args = (), kwargs = {'async_client': &lt;httpx.AsyncClient object at 0x7fe6ac18e7c0&gt;}
request = &lt;SubRequest 'async_client_bob' for &lt;Function test_bob_and_alice_connect&gt;&gt;
setup = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.setup at 0x7fe6ac237ca0&gt;
finalizer = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.finalizer at 0x7fe6ac237940&gt;

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
        request = fixture_stripper.get_and_strip_from(
            FixtureStripper.REQUEST, kwargs
        )

        gen_obj = generator(*args, **kwargs)

        async def setup():
            res = await gen_obj.__anext__()
            return res

        def finalizer():
            """Yield again, to finalize."""

            async def async_finalizer():
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)

            loop.run_until_complete(async_finalizer())

        request.addfinalizer(finalizer)
&gt;       return loop.run_until_complete(setup())

../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:142:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.8/asyncio/base_events.py:616: in run_until_complete
    return future.result()
../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:123: in setup
    res = await gen_obj.__anext__()
app/tests/conftest.py:109: in async_client_bob
    async with agent_client(async_client, "bob") as client:
app/tests/conftest.py:135: in agent_client
    agent = await async_next(create_wallet(async_client, name))
app/tests/test_dependencies.py:78: in async_next
    async for item in param:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

async_client = &lt;httpx.AsyncClient object at 0x7fe6ac18e7c0&gt;, key = 'bob'

    async def create_wallet(async_client, key):
        def create_wallet_payload(key):
            return {
                "image_url": "https://aries.ca/images/sample.png",
                "label": f"{key}{get_random_string(3)}",
                "wallet_key": "MySecretKey1234",
                "wallet_name": f"{key}{get_random_string(3)}",
            }

        wallet_payload = create_wallet_payload(key)

        wallet = (
            await async_client.post(
                "/admin/wallet-multitenant" + "/create-wallet",
                headers=DEFAULT_HEADERS,
                data=json.dumps(wallet_payload),
            )
        ).json()

        local_did = (
            await async_client.get(
                "/wallet/create-local-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        public_did = (
            await async_client.get(
                "/wallet/create-pub-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        yield AgentEntity(
            headers={**DEFAULT_HEADERS, "x-auth": f'Bearer {wallet["token"]}'},
            did=local_did["result"]["did"],
&gt;           pub_did=public_did["did_object"]["did"],
            verkey=local_did["result"]["verkey"],
            token=wallet["token"],
        )
E       KeyError: 'did_object'

app/tests/conftest.py:187: KeyError</error></testcase><testcase classname="app.tests.test_connections" name="test_bob_has_agent" time="5.759"><error message="failed on setup with &quot;KeyError: 'did_object'&quot;">args = (), kwargs = {'async_client': &lt;httpx.AsyncClient object at 0x7fe6a77460d0&gt;}
request = &lt;SubRequest 'async_client_bob' for &lt;Function test_bob_has_agent&gt;&gt;
setup = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.setup at 0x7fe6ac21d0d0&gt;
finalizer = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.finalizer at 0x7fe6ac21d790&gt;

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
        request = fixture_stripper.get_and_strip_from(
            FixtureStripper.REQUEST, kwargs
        )

        gen_obj = generator(*args, **kwargs)

        async def setup():
            res = await gen_obj.__anext__()
            return res

        def finalizer():
            """Yield again, to finalize."""

            async def async_finalizer():
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)

            loop.run_until_complete(async_finalizer())

        request.addfinalizer(finalizer)
&gt;       return loop.run_until_complete(setup())

../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:142:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.8/asyncio/base_events.py:616: in run_until_complete
    return future.result()
../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:123: in setup
    res = await gen_obj.__anext__()
app/tests/conftest.py:109: in async_client_bob
    async with agent_client(async_client, "bob") as client:
app/tests/conftest.py:135: in agent_client
    agent = await async_next(create_wallet(async_client, name))
app/tests/test_dependencies.py:78: in async_next
    async for item in param:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

async_client = &lt;httpx.AsyncClient object at 0x7fe6a77460d0&gt;, key = 'bob'

    async def create_wallet(async_client, key):
        def create_wallet_payload(key):
            return {
                "image_url": "https://aries.ca/images/sample.png",
                "label": f"{key}{get_random_string(3)}",
                "wallet_key": "MySecretKey1234",
                "wallet_name": f"{key}{get_random_string(3)}",
            }

        wallet_payload = create_wallet_payload(key)

        wallet = (
            await async_client.post(
                "/admin/wallet-multitenant" + "/create-wallet",
                headers=DEFAULT_HEADERS,
                data=json.dumps(wallet_payload),
            )
        ).json()

        local_did = (
            await async_client.get(
                "/wallet/create-local-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        public_did = (
            await async_client.get(
                "/wallet/create-pub-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        yield AgentEntity(
            headers={**DEFAULT_HEADERS, "x-auth": f'Bearer {wallet["token"]}'},
            did=local_did["result"]["did"],
&gt;           pub_did=public_did["did_object"]["did"],
            verkey=local_did["result"]["verkey"],
            token=wallet["token"],
        )
E       KeyError: 'did_object'

app/tests/conftest.py:187: KeyError</error></testcase><testcase classname="app.tests.test_connections" name="test_create_invite_oob" time="5.815" /><testcase classname="app.tests.test_connections" name="test_accept_invite_oob" time="5.241" /><testcase classname="app.tests.test_connections" name="test_oob_connect_via_pubdid" time="8.235"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('EE5od5AMT9AmRQyZK8P6Mz', 1634052895026591153, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:4021/wallet/did/public?did=EE5od5AMT9AmRQyZK8P6Mz')">async_client = &lt;httpx.AsyncClient object at 0x7fe6ac33b6a0&gt;
create_wallets_mock = ({'created_at': '2021-10-12T15:34:51.231112+00:00', 'key_management_mode': 'managed', 'settings': {'default_label': 'Y...e.png', 'wallet.dispatch_type': 'base', 'wallet.id': '3fff3dd6-250e-42d3-8a7c-5d8c6444788c', ...}, 'state': None, ...})

    @pytest.mark.asyncio
    async def test_oob_connect_via_pubdid(async_client, create_wallets_mock):
        yoda_token, yoda_wallet_id, han_token, han_wallet_id = await token_responses(
            async_client, create_wallets_mock
        )

        async with asynccontextmanager(dependencies.member_agent)(
            x_auth=f"Bearer {yoda_token}"
        ) as member_agent:
            # CReate a new public DID and write it to ledger
&gt;           pub_did_yoda_res = (await create_pub_did(member_agent)).dict()

app/tests/test_connections.py:431:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:4021/wallet/did/public?did=EE5od5AMT9AmRQyZK8P6Mz) [400 Ledger rejected transaction r...utf-8', 'Content-Length': '218', 'Date': 'Tue, 12 Oct 2021 15:34:57 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('EE5od5AMT9AmRQyZK8P6Mz', 1634052895026591153, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:4021/wallet/did/public?did=EE5od5AMT9AmRQyZK8P6Mz')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.test_dependencies" name="test_extract_token_from_bearer" time="0.004" /><testcase classname="app.tests.test_dependencies" name="test_yoma_agent" time="0.012" /><testcase classname="app.tests.test_dependencies" name="test_ecosystem_agent" time="0.011" /><testcase classname="app.tests.test_dependencies" name="test_member_agent" time="0.011" /><testcase classname="app.tests.test_dependencies" name="test_member_admin_agent" time="0.012" /><testcase classname="app.tests.test_dependencies" name="test_agent_selector[agent_selector-False-AcaPyClient]" time="0.033" /><testcase classname="app.tests.test_dependencies" name="test_agent_selector[admin_agent_selector-True-AcaPyClient]" time="0.029" /><testcase classname="app.tests.test_dependencies" name="test_web_ecosystem_or_member" time="0.084" /><testcase classname="app.tests.test_dependencies" name="test_ecosystem_admin_agent" time="0.011" /><testcase classname="app.tests.test_exception_handler" name="test_error_handler" time="0.027" /><testcase classname="app.tests.test_messaging" name="test_send_trust_ping" time="5.057"><error message="failed on setup with &quot;KeyError: 'did_object'&quot;">args = (), kwargs = {}, request = &lt;SubRequest 'async_client_bob_module_scope' for &lt;Function test_send_trust_ping&gt;&gt;
setup = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.setup at 0x7fe6ac053700&gt;
finalizer = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.finalizer at 0x7fe6ac053f70&gt;

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
        request = fixture_stripper.get_and_strip_from(
            FixtureStripper.REQUEST, kwargs
        )

        gen_obj = generator(*args, **kwargs)

        async def setup():
            res = await gen_obj.__anext__()
            return res

        def finalizer():
            """Yield again, to finalize."""

            async def async_finalizer():
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)

            loop.run_until_complete(async_finalizer())

        request.addfinalizer(finalizer)
&gt;       return loop.run_until_complete(setup())

../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:142:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.8/asyncio/base_events.py:616: in run_until_complete
    return future.result()
../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:123: in setup
    res = await gen_obj.__anext__()
app/tests/conftest.py:116: in async_client_bob_module_scope
    async with agent_client(async_client, "bob") as client:
app/tests/conftest.py:135: in agent_client
    agent = await async_next(create_wallet(async_client, name))
app/tests/test_dependencies.py:78: in async_next
    async for item in param:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

async_client = &lt;httpx.AsyncClient object at 0x7fe6ac0f08e0&gt;, key = 'bob'

    async def create_wallet(async_client, key):
        def create_wallet_payload(key):
            return {
                "image_url": "https://aries.ca/images/sample.png",
                "label": f"{key}{get_random_string(3)}",
                "wallet_key": "MySecretKey1234",
                "wallet_name": f"{key}{get_random_string(3)}",
            }

        wallet_payload = create_wallet_payload(key)

        wallet = (
            await async_client.post(
                "/admin/wallet-multitenant" + "/create-wallet",
                headers=DEFAULT_HEADERS,
                data=json.dumps(wallet_payload),
            )
        ).json()

        local_did = (
            await async_client.get(
                "/wallet/create-local-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        public_did = (
            await async_client.get(
                "/wallet/create-pub-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        yield AgentEntity(
            headers={**DEFAULT_HEADERS, "x-auth": f'Bearer {wallet["token"]}'},
            did=local_did["result"]["did"],
&gt;           pub_did=public_did["did_object"]["did"],
            verkey=local_did["result"]["verkey"],
            token=wallet["token"],
        )
E       KeyError: 'did_object'

app/tests/conftest.py:187: KeyError</error></testcase><testcase classname="app.tests.test_messaging" name="test_send_message" time="0.002"><error message="failed on setup with &quot;KeyError: 'did_object'&quot;">args = (), kwargs = {}, request = &lt;SubRequest 'async_client_bob_module_scope' for &lt;Function test_send_trust_ping&gt;&gt;
setup = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.setup at 0x7fe6ac053700&gt;
finalizer = &lt;function pytest_fixture_setup.&lt;locals&gt;.wrapper.&lt;locals&gt;.finalizer at 0x7fe6ac053f70&gt;

    def wrapper(*args, **kwargs):
        loop = fixture_stripper.get_and_strip_from(
            FixtureStripper.EVENT_LOOP, kwargs
        )
        request = fixture_stripper.get_and_strip_from(
            FixtureStripper.REQUEST, kwargs
        )

        gen_obj = generator(*args, **kwargs)

        async def setup():
            res = await gen_obj.__anext__()
            return res

        def finalizer():
            """Yield again, to finalize."""

            async def async_finalizer():
                try:
                    await gen_obj.__anext__()
                except StopAsyncIteration:
                    pass
                else:
                    msg = "Async generator fixture didn't stop."
                    msg += "Yield only once."
                    raise ValueError(msg)

            loop.run_until_complete(async_finalizer())

        request.addfinalizer(finalizer)
&gt;       return loop.run_until_complete(setup())

../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:142:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
/usr/lib/python3.8/asyncio/base_events.py:616: in run_until_complete
    return future.result()
../.venv-fastapi/lib/python3.8/site-packages/pytest_asyncio/plugin.py:123: in setup
    res = await gen_obj.__anext__()
app/tests/conftest.py:116: in async_client_bob_module_scope
    async with agent_client(async_client, "bob") as client:
app/tests/conftest.py:135: in agent_client
    agent = await async_next(create_wallet(async_client, name))
app/tests/test_dependencies.py:78: in async_next
    async for item in param:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

async_client = &lt;httpx.AsyncClient object at 0x7fe6ac0f08e0&gt;, key = 'bob'

    async def create_wallet(async_client, key):
        def create_wallet_payload(key):
            return {
                "image_url": "https://aries.ca/images/sample.png",
                "label": f"{key}{get_random_string(3)}",
                "wallet_key": "MySecretKey1234",
                "wallet_name": f"{key}{get_random_string(3)}",
            }

        wallet_payload = create_wallet_payload(key)

        wallet = (
            await async_client.post(
                "/admin/wallet-multitenant" + "/create-wallet",
                headers=DEFAULT_HEADERS,
                data=json.dumps(wallet_payload),
            )
        ).json()

        local_did = (
            await async_client.get(
                "/wallet/create-local-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        public_did = (
            await async_client.get(
                "/wallet/create-pub-did",
                headers={**DEFAULT_HEADERS, "x-auth": f"Bearer {wallet['token']}"},
            )
        ).json()
        yield AgentEntity(
            headers={**DEFAULT_HEADERS, "x-auth": f'Bearer {wallet["token"]}'},
            did=local_did["result"]["did"],
&gt;           pub_did=public_did["did_object"]["did"],
            verkey=local_did["result"]["verkey"],
            token=wallet["token"],
        )
E       KeyError: 'did_object'

app/tests/conftest.py:187: KeyError</error></testcase><testcase classname="app.tests.test_utils" name="test_construct_zkp" time="0.001" /><testcase classname="app.tests.test_utils" name="test_construct_zkp_empty" time="0.001" /><testcase classname="app.tests.test_utils" name="test_construct_indy_proof_request" time="0.001" /><testcase classname="app.tests.test_via_web_wallet" name="test_get_pub_did_via_web" time="5.748"><failure message="assert 400 == 200&#10; +  where 400 = &lt;Response [400 Bad Request]&gt;.status_code">setup_env = None

    @pytest.mark.asyncio
    async def test_get_pub_did_via_web(setup_env):
        async with AsyncClient(app=app, base_url="http://localhost:8000") as ac:
            response = await ac.get(
                "/wallet/create-pub-did",
                headers={"x-api-key": "adminApiKey", "x-role": "yoma"},
            )
&gt;       assert response.status_code == 200
E       assert 400 == 200
E        +  where 400 = &lt;Response [400 Bad Request]&gt;.status_code

app/tests/test_via_web_wallet.py:18: AssertionError</failure></testcase><testcase classname="app.tests.test_via_web_wallet" name="test_get_pub_did_via_web_no_header" time="0.006" /><testcase classname="app.tests.admin.governance.credential_definitions.test_credential_definitions" name="test_create_credential_definition" time="5.994"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('BLojMbKqSCLHBeXCn1g61q', 1634052914797253719, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:3021/wallet/did/public?did=BLojMbKqSCLHBeXCn1g61q')">setup_local_env = None, yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6ac1aae50&gt;

    @pytest.mark.asyncio
    async def test_create_credential_definition(setup_local_env, yoma_agent_mock):
        # given
        definition = SchemaDefinition(name="x", version="0.1", attributes=["average"])

&gt;       public_did = await create_public_did(yoma_agent_mock)

app/tests/admin/governance/credential_definitions/test_credential_definitions.py:30:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:3021/wallet/did/public?did=BLojMbKqSCLHBeXCn1g61q) [400 Ledger rejected transaction r...utf-8', 'Content-Length': '218', 'Date': 'Tue, 12 Oct 2021 15:35:17 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('BLojMbKqSCLHBeXCn1g61q', 1634052914797253719, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:3021/wallet/did/public?did=BLojMbKqSCLHBeXCn1g61q')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.admin.governance.credential_definitions.test_credential_definitions" name="test_create_credential_definition_via_web" time="5.688"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('KvbeF3eRXDpj9M1kZCFXSR', 1634052920671340171, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:3021/wallet/did/public?did=KvbeF3eRXDpj9M1kZCFXSR')">setup_local_env = None, yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6ac10a4f0&gt;
async_client = &lt;httpx.AsyncClient object at 0x7fe6a74d1100&gt;

    @pytest.mark.asyncio
    async def test_create_credential_definition_via_web(
        setup_local_env, yoma_agent_mock, async_client
    ):
        # given
        definition = SchemaDefinition(name="x", version="0.1", attributes=["average"])

&gt;       public_did = await create_public_did(yoma_agent_mock)

app/tests/admin/governance/credential_definitions/test_credential_definitions.py:65:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:3021/wallet/did/public?did=KvbeF3eRXDpj9M1kZCFXSR) [400 Ledger rejected transaction r...utf-8', 'Content-Length': '218', 'Date': 'Tue, 12 Oct 2021 15:35:23 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('KvbeF3eRXDpj9M1kZCFXSR', 1634052920671340171, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:3021/wallet/did/public?did=KvbeF3eRXDpj9M1kZCFXSR')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.admin.governance.credential_definitions.test_credential_definitions" name="test_get_credential_definitions" time="5.756"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('9GC5iTziMYGvos81dR5sXu', 1634052926714036367, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:3021/wallet/did/public?did=9GC5iTziMYGvos81dR5sXu')">setup_local_env = None, yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6a7604b50&gt;

    @pytest.mark.asyncio
    async def test_get_credential_definitions(setup_local_env, yoma_agent_mock):
        # given
        definition1 = SchemaDefinition(name="x", version="0.1", attributes=["average"])
        definition2 = SchemaDefinition(name="y", version="0.1", attributes=["average"])

&gt;       public_did = await create_public_did(yoma_agent_mock)

app/tests/admin/governance/credential_definitions/test_credential_definitions.py:107:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:3021/wallet/did/public?did=9GC5iTziMYGvos81dR5sXu) [400 Ledger rejected transaction r...utf-8', 'Content-Length': '218', 'Date': 'Tue, 12 Oct 2021 15:35:29 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('9GC5iTziMYGvos81dR5sXu', 1634052926714036367, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:3021/wallet/did/public?did=9GC5iTziMYGvos81dR5sXu')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.admin.governance.credential_definitions.test_credential_definitions" name="test_get_credential_definitions_via_web" time="5.785"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('SahRWFh6ypsoNmVYJYE9GM', 1634052932712115010, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:3021/wallet/did/public?did=SahRWFh6ypsoNmVYJYE9GM')">setup_local_env = None, yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6a75d1580&gt;
async_client = &lt;httpx.AsyncClient object at 0x7fe6a766e370&gt;

    @pytest.mark.asyncio
    async def test_get_credential_definitions_via_web(
        setup_local_env, yoma_agent_mock, async_client
    ):
        # given
        definition = SchemaDefinition(name="x", version="0.1", attributes=["average"])

&gt;       public_did = await create_public_did(yoma_agent_mock)

app/tests/admin/governance/credential_definitions/test_credential_definitions.py:153:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:3021/wallet/did/public?did=SahRWFh6ypsoNmVYJYE9GM) [400 Ledger rejected transaction r...utf-8', 'Content-Length': '218', 'Date': 'Tue, 12 Oct 2021 15:35:35 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('SahRWFh6ypsoNmVYJYE9GM', 1634052932712115010, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:3021/wallet/did/public?did=SahRWFh6ypsoNmVYJYE9GM')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.admin.governance.credential_definitions.test_credential_definitions" name="test_get_credential_definition" time="5.682"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('rSdTm76sVqFydf83Qc1tP', 1634052938708547249, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:3021/wallet/did/public?did=rSdTm76sVqFydf83Qc1tP')">setup_local_env = None, yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6a74d1850&gt;

    @pytest.mark.asyncio
    async def test_get_credential_definition(setup_local_env, yoma_agent_mock):
        # given
        definition1 = SchemaDefinition(name="x", version="0.1", attributes=["average"])

&gt;       await create_public_did(yoma_agent_mock)

app/tests/admin/governance/credential_definitions/test_credential_definitions.py:187:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:3021/wallet/did/public?did=rSdTm76sVqFydf83Qc1tP) [400 Ledger rejected transaction re...utf-8', 'Content-Length': '217', 'Date': 'Tue, 12 Oct 2021 15:35:41 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('rSdTm76sVqFydf83Qc1tP', 1634052938708547249, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:3021/wallet/did/public?did=rSdTm76sVqFydf83Qc1tP')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.admin.governance.credential_definitions.test_credential_definitions" name="test_get_credential_definition_via_web" time="5.744"><failure message="aiohttp.client_exceptions.ClientResponseError: 400, message=&quot;Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('Tgc5ZQBTCLxDsB5dKMs6rK', 1634052944825345048, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).&quot;, url=URL('http://localhost:3021/wallet/did/public?did=Tgc5ZQBTCLxDsB5dKMs6rK')">setup_local_env = None, yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6a76e0fd0&gt;
async_client = &lt;httpx.AsyncClient object at 0x7fe6ac1a2f10&gt;

    @pytest.mark.asyncio
    async def test_get_credential_definition_via_web(
        setup_local_env, yoma_agent_mock, async_client
    ):
        # given
        definition1 = SchemaDefinition(name="x", version="0.1", attributes=["average"])
&gt;       await create_public_did(yoma_agent_mock)

app/tests/admin/governance/credential_definitions/test_credential_definitions.py:223:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
app/acapy_ledger_facade.py:131: in create_pub_did
    await wallet_facade.assign_pub_did(aries_controller, did_object.did)
app/acapy_wallet_facade.py:49: in assign_pub_did
    assign_pub_did_response = await controller.wallet.set_public_did(did=did)
../.venv-fastapi/lib/python3.8/site-packages/aries_cloudcontroller/api/wallet.py:76: in set_public_did
    return await self.__set_public_did(
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:38: in execute
    response = yield from executable.execute()
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:20: in invoke
    response = yield from callback.on_failure(type(error), error, tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:108: in on_failure
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/execution.py:128: in fail
    return self._io.fail(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/interfaces.py:303: in fail
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/hooks.py:109: in handle_exception
    compat.reraise(exc_type, exc_val, exc_tb)
../.venv-fastapi/lib/python3.8/site-packages/six.py:703: in reraise
    raise value
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/io/asyncio_strategy.py:17: in invoke
    response = yield from func(*args, **kwargs)
../.venv-fastapi/lib/python3.8/site-packages/uplink/clients/aiohttp_.py:135: in send
    response = yield from session.request(method, url, **extras)
../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client.py:625: in _request
    resp.raise_for_status()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;ClientResponse(http://localhost:3021/wallet/did/public?did=Tgc5ZQBTCLxDsB5dKMs6rK) [400 Ledger rejected transaction r...utf-8', 'Content-Length': '218', 'Date': 'Tue, 12 Oct 2021 15:35:47 GMT', 'Server': 'Python/3.6 aiohttp/3.7.4.post0')&gt;


    def raise_for_status(self) -&gt; None:
        if 400 &lt;= self.status:
            # reason should always be not None for a started response
            assert self.reason is not None
            self.release()
&gt;           raise ClientResponseError(
                self.request_info,
                self.history,
                status=self.status,
                message=self.reason,
                headers=self.headers,
            )
E           aiohttp.client_exceptions.ClientResponseError: 400, message="Ledger rejected transaction request: client request invalid: InvalidClientTaaAcceptanceError('Tgc5ZQBTCLxDsB5dKMs6rK', 1634052944825345048, 'Txn Author Agreement acceptance is required for ledger with id 1', 201).", url=URL('http://localhost:3021/wallet/did/public?did=Tgc5ZQBTCLxDsB5dKMs6rK')

../.venv-fastapi/lib/python3.8/site-packages/aiohttp/client_reqrep.py:1000: ClientResponseError</failure></testcase><testcase classname="app.tests.admin.governance.dids.test_dids" name="test_get_trusted_registry" time="0.163" /><testcase classname="app.tests.admin.governance.dids.test_dids" name="test_get_trusted_partner" time="5.594"><failure message="KeyError: 'did_object'">async_client = &lt;httpx.AsyncClient object at 0x7fe6ac192550&gt;
yoma_agent_mock = &lt;aries_cloudcontroller.acapy_client.AcaPyClient object at 0x7fe6ac192670&gt;

    @pytest.mark.asyncio
    async def test_get_trusted_partner(async_client, yoma_agent_mock):

        # Create a public did
        did_response = await async_client.get(
            "/wallet/create-pub-did",
            headers={
                "x-api-key": "adminApiKey",
                "x-role": "yoma",
                **APPLICATION_JSON_CONTENT_TYPE,
            },
        )
        res_json = did_response.json()
&gt;       did_created = res_json["did_object"]["did"]
E       KeyError: 'did_object'

app/tests/admin/governance/dids/test_dids.py:41: KeyError</failure></testcase><testcase classname="app.tests.admin.governance.multitenantwallet.test_wallet_admin" name="test_get_subwallet_auth_token" time="5.034" /><testcase classname="app.tests.admin.governance.multitenantwallet.test_wallet_admin" name="test_get_subwallet" time="2.516" /><testcase classname="app.tests.admin.governance.multitenantwallet.test_wallet_admin" name="test_update_wallet" time="2.702" /><testcase classname="app.tests.admin.governance.multitenantwallet.test_wallet_admin" name="test_query_subwallet" time="2.592" /><testcase time="1.629" /></testsuite></testsuites>
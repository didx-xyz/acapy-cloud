#!/bin/bash
export MSYS_NO_PATHCONV=1
export DOCKERHOST=${APPLICATION_URL-$(hostname -I | awk '{print $1}')}
set -e

SCRIPT_HOME="$(cd "$(dirname "$0")" && pwd)"

# =================================================================================================================
# Usage:
# -----------------------------------------------------------------------------------------------------------------
usage() {
  cat <<-EOF

      Usage: $0 [command] [options]

      Commands:

      up -  Builds the images, creates the application containers
            and starts the services based on the docker-compose.yml file.

            You can pass in a list of containers to start.
            By default all containers will be started.

            The API_URL used by tob-web can also be redirected.

            Examples:
            $0 start
            $0 start EXTERNAL-agent

      start - Same as up

      restart - Re-starts the application containers,
                useful when updating one of the container images during development.

            You can pass in a list of containers to be restarted.
            By default all containers will be restarted.

            Examples:
            $0 start
            $0 start faber-agent

      logs - Display the logs from the docker compose run (ctrl-c to exit).

      stop - Stops the services.  This is a non-destructive process.  The volumes and containers
             are not deleted so they will be reused the next time you run start.

      down - Brings down the services and removes the volumes (storage) and containers.
      rm - Same as down

      tests - Same as up but run the Tests container too

EOF
  exit 1
}
# -----------------------------------------------------------------------------------------------------------------
# Default Settings:
# -----------------------------------------------------------------------------------------------------------------
DEFAULT_CONTAINERS="governance-trust-registry trustregistry-db governance-multitenant-wallets-db governance-multitenant-agent tails-server ledger-nodes ledger-browser
                    governance-ga-wallets-db governance-ga-agent governance-multitenant-web governance-tenant-web governance-ga-web governance-public-web
                    waypoint"
TEST_CONTAINERS="${DEFAULT_CONTAINERS} tests"
# -----------------------------------------------------------------------------------------------------------------
# Functions:
# -----------------------------------------------------------------------------------------------------------------
function echoRed() {
  _msg=${1}
  _red='\e[31m'
  _nc='\e[0m' # No Color
  echo -e "${_red}${_msg}${_nc}"
}

function echoYellow() {
  _msg=${1}
  _yellow='\e[33m'
  _nc='\e[0m' # No Color
  echo -e "${_yellow}${_msg}${_nc}"
}

configureEnvironment() {

  if [ -f .env ]; then
    while read line; do
      if [[ ! "$line" =~ ^\# ]] && [[ "$line" =~ .*= ]]; then
        export ${line//[$'\r\n']/}
      fi
    done <.env
  fi

  for arg in "$@"; do
    # Remove recognized arguments from the list after processing.
    shift

    # echo "arg: ${arg}"
    # echo "Remaining: ${@}"

    case "$arg" in
    *=*)
      # echo "Exporting ..."
      export "${arg}"
      ;;
    *)
      # echo "Saving for later ..."
      # If not recognized, save it for later procesing ...
      set -- "$@" "$arg"
      ;;
    esac
  done

  # global
  export COMPOSE_PROJECT_NAME="${COMPOSE_PROJECT_NAME:controller}"
  export GENESIS_URL="http://localhost:9000/genesis"
  export WALLET_TYPE="askar-anoncreds"

  export REGISTRY="${REGISTRY}"
  export IMAGE_TAG="${IMAGE_TAG}"

}

getInputParams() {
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    *)
      ARGS+=" $arg"
      ;;
    esac
  done

  echo ${ARGS}
}

getStartupParams() {
  CONTAINERS=""
  ARGS=""

  for arg in $@; do
    case "$arg" in
    *=*)
      # Skip it
      ;;
    -*)
      ARGS+=" $arg"
      ;;
    *)
      CONTAINERS+=" $arg"
      ;;
    esac
  done

  if [ $tests ]; then
    CONTAINERS="$TEST_CONTAINERS"
  fi
  if [ -z "$CONTAINERS" ]; then
    CONTAINERS="$DEFAULT_CONTAINERS"
  fi

  echo ${ARGS} ${CONTAINERS}
}

deleteVolumes() {
  _projectName=${COMPOSE_PROJECT_NAME:-docker}

  echo "Stopping and removing any running containers ..."
  docker compose down -v

  _pattern="^${_projectName}_\|^docker_"
  _volumes=$(docker volume ls -q | grep ${_pattern})

  if [ ! -z "${_volumes}" ]; then
    echo "Removing project volumes ..."
    echo ${_volumes} | xargs docker volume rm
  else
    echo "No project volumes exist."
  fi

  echo "Removing build cache ..."
  rm -Rf ../client/tob-web/.cache
}

getSeedJson() {
  _seed=${1}
  if [ -z "${_seed}" ]; then
    echo -e \\n"getSeedJson; Missing parameter!"\\n
    exit 1
  fi

  echo "{\"seed\": \"${_seed}\"}"
}

generateSeeds() {
  echo ${INDY_WALLET_SEED}
}

toLower() {
  echo $(echo ${@} | tr '[:upper:]' '[:lower:]')
}

echoError() {
  _msg=${1}
  _red='\033[0;31m'
  _nc='\033[0m' # No Color
  echo -e "${_red}${_msg}${_nc}" >&2
}

functionExists() {
  (
    if [ ! -z ${1} ] && type ${1} &>/dev/null; then
      return 0
    else
      return 1
    fi
  )
}
# =================================================================================================================

pushd "${SCRIPT_HOME}" >/dev/null
COMMAND=$(toLower ${1})
shift || COMMAND=usage

case "${COMMAND}" in
start | up)
  echoYellow "Starting up... This can take a couple of minutes."
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker --log-level ERROR \
    compose up \
    --build --remove-orphans \
    -d ${_startupParams}
  docker --log-level ERROR \
    compose logs \
    -f
  ;;
up-as-daemon)
  echoYellow "Starting up... This can take a couple of minutes."
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker --log-level ERROR \
    compose up \
    --build --remove-orphans --force-recreate -d ${_startupParams}
  ;;
up-daemon-usecache)
  echoYellow "Starting up... This can take a couple of minutes."
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker --log-level ERROR \
    compose up \
    --build \
    -d ${_startupParams}
  ;;
 up-as-daemon-no-build)
  echoYellow "Starting up... This can take a couple of minutes."
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker --log-level ERROR \
    compose up \
    --no-build \
    -d ${_startupParams}
    ;;
tests)
  echoYellow "Starting up... This can take a couple of minutes."
  tests=true
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  # Create a directory for logs if it doesn't exist
  log_dir="logs/compose-up"
  mkdir -p "$log_dir"

  # Generate a timestamp for the log file
  timestamp=$(date +"%Y-%m-%d_%H-%M-%S")

  # Construct the log file path
  log_file="$log_dir/docker_startup_${timestamp}.log"

  docker --log-level ERROR \
    compose up \
    --build --remove-orphans \
    -d ${_startupParams} 2>&1 | tee "$log_file"

  echo "Testing ..."
  docker --log-level ERROR \
    compose logs \
    -f | \
    while IFS= read -r line; do
      if [[ "$line" == "tests exited with code"* ]]; then
        # React to the desired log entry
        echo "Detected 'tests exited with code' in log. Stopping services..."
        exit 0
      fi
    done
  ;;
restart)
  _startupParams=$(getStartupParams $@)
  configureEnvironment "$@"
  docker compose stop ${_startupParams}
  docker compose up -d --build --remove-orphans ${_startupParams}
  ;;
logs)
  configureEnvironment "$@"
  docker compose logs -f
  ;;
stop)
  configureEnvironment
  docker compose stop
  ;;
rm | down)
  configureEnvironment
  docker --log-level ERROR \
    compose down \
    -v
  usage
  ;;
esac

popd >/dev/null
